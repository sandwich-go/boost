// Code generated by optiongen. DO NOT EDIT.
// optiongen: github.com/timestee/optiongen

package dns

import (
	"net"
	"sync/atomic"
	"time"
	"unsafe"
)

// Options should use NewOptions to initialize it
type Options struct {
	TTL           time.Duration `xconf:"ttl" usage:"Cache过期ttl"`
	Dialer        Dialer        `xconf:"dialer" usage:"拨号器"`
	Resolver      Resolver      `xconf:"resolver" usage:"解析器"`
	Policy        Policy        `xconf:"policy" usage:"拨号策略"`
	LookupTimeout time.Duration `xconf:"lookup_timeout" usage:"搜索超时"`
	OnLookup      OnLookup      `xconf:"on_lookup" usage:"当成功搜索"`
}

// NewOptions new Options
func NewOptions(opts ...Option) *Options {
	cc := newDefaultOptions()
	for _, opt := range opts {
		opt(cc)
	}
	if watchDogOptions != nil {
		watchDogOptions(cc)
	}
	return cc
}

// ApplyOption apply multiple new option and return the old ones
// sample:
// old := cc.ApplyOption(WithTimeout(time.Second))
// defer cc.ApplyOption(old...)
func (cc *Options) ApplyOption(opts ...Option) []Option {
	var previous []Option
	for _, opt := range opts {
		previous = append(previous, opt(cc))
	}
	return previous
}

// Option option func
type Option func(cc *Options) Option

// WithTTL Cache过期ttl
func WithTTL(v time.Duration) Option {
	return func(cc *Options) Option {
		previous := cc.TTL
		cc.TTL = v
		return WithTTL(previous)
	}
}

// WithDialer 拨号器
func WithDialer(v Dialer) Option {
	return func(cc *Options) Option {
		previous := cc.Dialer
		cc.Dialer = v
		return WithDialer(previous)
	}
}

// WithResolver 解析器
func WithResolver(v Resolver) Option {
	return func(cc *Options) Option {
		previous := cc.Resolver
		cc.Resolver = v
		return WithResolver(previous)
	}
}

// WithPolicy 拨号策略
func WithPolicy(v Policy) Option {
	return func(cc *Options) Option {
		previous := cc.Policy
		cc.Policy = v
		return WithPolicy(previous)
	}
}

// WithLookupTimeout 搜索超时
func WithLookupTimeout(v time.Duration) Option {
	return func(cc *Options) Option {
		previous := cc.LookupTimeout
		cc.LookupTimeout = v
		return WithLookupTimeout(previous)
	}
}

// WithOnLookup 当成功搜索
func WithOnLookup(v OnLookup) Option {
	return func(cc *Options) Option {
		previous := cc.OnLookup
		cc.OnLookup = v
		return WithOnLookup(previous)
	}
}

// InstallOptionsWatchDog the installed func will called when NewOptions  called
func InstallOptionsWatchDog(dog func(cc *Options)) { watchDogOptions = dog }

// watchDogOptions global watch dog
var watchDogOptions func(cc *Options)

// newDefaultOptions new default Options
func newDefaultOptions() *Options {
	cc := &Options{}

	for _, opt := range [...]Option{
		WithTTL(0),
		WithDialer(defaultDialer),
		WithResolver(net.DefaultResolver),
		WithPolicy(PolicyFirst),
		WithLookupTimeout(3 * time.Second),
		WithOnLookup(nil),
	} {
		opt(cc)
	}

	return cc
}

// AtomicSetFunc used for XConf
func (cc *Options) AtomicSetFunc() func(interface{}) { return AtomicOptionsSet }

// atomicOptions global *Options holder
var atomicOptions unsafe.Pointer

// onAtomicOptionsSet global call back when  AtomicOptionsSet called by XConf.
// use OptionsInterface.ApplyOption to modify the updated cc
// if passed in cc not valid, then return false, cc will not set to atomicOptions
var onAtomicOptionsSet func(cc OptionsInterface) bool

// InstallCallbackOnAtomicOptionsSet install callback
func InstallCallbackOnAtomicOptionsSet(callback func(cc OptionsInterface) bool) {
	onAtomicOptionsSet = callback
}

// AtomicOptionsSet atomic setter for *Options
func AtomicOptionsSet(update interface{}) {
	cc := update.(*Options)
	if onAtomicOptionsSet != nil && !onAtomicOptionsSet(cc) {
		return
	}
	atomic.StorePointer(&atomicOptions, (unsafe.Pointer)(cc))
}

// AtomicOptions return atomic *OptionsVisitor
func AtomicOptions() OptionsVisitor {
	current := (*Options)(atomic.LoadPointer(&atomicOptions))
	if current == nil {
		defaultOne := newDefaultOptions()
		if watchDogOptions != nil {
			watchDogOptions(defaultOne)
		}
		atomic.CompareAndSwapPointer(&atomicOptions, nil, (unsafe.Pointer)(defaultOne))
		return (*Options)(atomic.LoadPointer(&atomicOptions))
	}
	return current
}

// all getter func
func (cc *Options) GetTTL() time.Duration           { return cc.TTL }
func (cc *Options) GetDialer() Dialer               { return cc.Dialer }
func (cc *Options) GetResolver() Resolver           { return cc.Resolver }
func (cc *Options) GetPolicy() Policy               { return cc.Policy }
func (cc *Options) GetLookupTimeout() time.Duration { return cc.LookupTimeout }
func (cc *Options) GetOnLookup() OnLookup           { return cc.OnLookup }

// OptionsVisitor visitor interface for Options
type OptionsVisitor interface {
	GetTTL() time.Duration
	GetDialer() Dialer
	GetResolver() Resolver
	GetPolicy() Policy
	GetLookupTimeout() time.Duration
	GetOnLookup() OnLookup
}

// OptionsInterface visitor + ApplyOption interface for Options
type OptionsInterface interface {
	OptionsVisitor
	ApplyOption(...Option) []Option
}
