// Code generated by optiongen. DO NOT EDIT.
// optiongen: github.com/timestee/optiongen

package paniccatcher

import (
	"fmt"
	"time"

	"github.com/sandwich-go/boost/internal/log"
)

// AutoRecoverOptions should use NewAutoRecoverOptions to initialize it
type AutoRecoverOptions struct {
	// annotation@DelayTime(comment="每次panic后重启delay的时间 Note: 这里应该可以直接对接到retry package，复用重试逻辑")
	DelayTime time.Duration
	// annotation@OnRecover(comment="如果指定了该函数，recover panic的时候，会执行该函数，默认输出error日志")
	OnRecover OnRecover
}

// NewAutoRecoverOptions new AutoRecoverOptions
func NewAutoRecoverOptions(opts ...AutoRecoverOption) *AutoRecoverOptions {
	cc := newDefaultAutoRecoverOptions()
	for _, opt := range opts {
		opt(cc)
	}
	if watchDogAutoRecoverOptions != nil {
		watchDogAutoRecoverOptions(cc)
	}
	return cc
}

// ApplyOption apply multiple new option
func (cc *AutoRecoverOptions) ApplyOption(opts ...AutoRecoverOption) {
	for _, opt := range opts {
		opt(cc)
	}
}

// AutoRecoverOption option func
type AutoRecoverOption func(cc *AutoRecoverOptions)

// WithAutoRecoverOptionDelayTime 每次panic后重启delay的时间 Note: 这里应该可以直接对接到retry package，复用重试逻辑
func WithAutoRecoverOptionDelayTime(v time.Duration) AutoRecoverOption {
	return func(cc *AutoRecoverOptions) {
		cc.DelayTime = v
	}
}

// WithAutoRecoverOptionOnRecover 如果指定了该函数，recover panic的时候，会执行该函数，默认输出error日志
func WithAutoRecoverOptionOnRecover(v OnRecover) AutoRecoverOption {
	return func(cc *AutoRecoverOptions) {
		cc.OnRecover = v
	}
}

// InstallAutoRecoverOptionsWatchDog the installed func will called when NewAutoRecoverOptions  called
func InstallAutoRecoverOptionsWatchDog(dog func(cc *AutoRecoverOptions)) {
	watchDogAutoRecoverOptions = dog
}

// watchDogAutoRecoverOptions global watch dog
var watchDogAutoRecoverOptions func(cc *AutoRecoverOptions)

// newDefaultAutoRecoverOptions new default AutoRecoverOptions
func newDefaultAutoRecoverOptions() *AutoRecoverOptions {
	cc := &AutoRecoverOptions{}

	for _, opt := range [...]AutoRecoverOption{
		WithAutoRecoverOptionDelayTime(0),
		WithAutoRecoverOptionOnRecover(func(tag string, reason interface{}) {
			log.Error(fmt.Sprintf("%s panic with err, reason: %v", tag, reason))
		}),
	} {
		opt(cc)
	}

	return cc
}

// all getter func
func (cc *AutoRecoverOptions) GetDelayTime() time.Duration { return cc.DelayTime }
func (cc *AutoRecoverOptions) GetOnRecover() OnRecover     { return cc.OnRecover }

// AutoRecoverOptionsVisitor visitor interface for AutoRecoverOptions
type AutoRecoverOptionsVisitor interface {
	GetDelayTime() time.Duration
	GetOnRecover() OnRecover
}

// AutoRecoverOptionsInterface visitor + ApplyOption interface for AutoRecoverOptions
type AutoRecoverOptionsInterface interface {
	AutoRecoverOptionsVisitor
	ApplyOption(...AutoRecoverOption)
}
