// Code generated by gotemplate. DO NOT EDIT.

package syncmap

import (
	"sort"
	"strconv"
	"sync"
)

//template type SyncMap(KType,VType)

type Int8Int struct {
	sm     sync.Map
	locker sync.RWMutex
}

func NewInt8Int() *Int8Int {
	return &Int8Int{}
}

func (s *Int8Int) Keys() (ret []int8) {
	s.sm.Range(func(key, value interface{}) bool {
		ret = append(ret, key.(int8))
		return true
	})
	return ret
}

func (s *Int8Int) Len() (c int) {
	s.sm.Range(func(key, value interface{}) bool {
		c++
		return true
	})
	return c
}

func (s *Int8Int) Contains(key int8) (ok bool) {
	_, ok = s.Load(key)
	return
}

func (s *Int8Int) Get(key int8) (value int) {
	value, _ = s.Load(key)
	return
}

func (s *Int8Int) Load(key int8) (value int, loaded bool) {
	if v, ok := s.sm.Load(key); ok {
		return v.(int), true
	}
	return
}
func (s *Int8Int) DeleteMultiple(keys ...int8) {
	for _, k := range keys {
		s.sm.Delete(k)
	}
}
func (s *Int8Int) Clear() {
	s.sm.Range(func(key, value interface{}) bool {
		s.sm.Delete(key)
		return true
	})
}
func (s *Int8Int) Delete(key int8)         { s.sm.Delete(key) }
func (s *Int8Int) Store(key int8, val int) { s.sm.Store(key, val) }
func (s *Int8Int) LoadAndDelete(key int8) (value int, loaded bool) {
	if v, ok := s.sm.LoadAndDelete(key); ok {
		return v.(int), true
	}
	return
}
func (s *Int8Int) GetOrSetFuncErrorLock(key int8, cf func(key int8) (int, error)) (value int, loaded bool, err error) {
	return s.LoadOrStoreFuncErrorLock(key, cf)
}

func (s *Int8Int) LoadOrStoreFuncErrorLock(key int8, cf func(key int8) (int, error)) (value int, loaded bool, err error) {
	if v, ok := s.Load(key); ok {
		return v, true, nil
	}
	s.locker.Lock()
	defer s.locker.Unlock()
	// 再次重试，如果获取到则直接返回
	if v, ok := s.Load(key); ok {
		return v, true, nil
	}
	value, err = cf(key)
	if err != nil {
		return value, false, err
	}
	s.Store(key, value)
	return value, false, nil
}

func (s *Int8Int) GetOrSetFuncLock(key int8, cf func(key int8) int) (value int, loaded bool) {
	return s.LoadOrStoreFuncLock(key, cf)
}

func (s *Int8Int) LoadOrStoreFuncLock(key int8, cf func(key int8) int) (value int, loaded bool) {
	value, loaded, _ = s.LoadOrStoreFuncErrorLock(key, func(key int8) (int, error) {
		return cf(key), nil
	})
	return value, loaded
}

func (s *Int8Int) LoadOrStore(key int8, val int) (int, bool) {
	actual, ok := s.sm.LoadOrStore(key, val)
	return actual.(int), ok
}

func (s *Int8Int) Range(f func(key int8, value int) bool) {
	s.sm.Range(func(k, v interface{}) bool {
		return f(k.(int8), v.(int))
	})
}

func (s *Int8Int) RangeDeterministic(f func(key int8, value int) bool, sortableGetter func([]int8) sort.Interface) {
	var keys []int8
	s.sm.Range(func(key, value interface{}) bool {
		keys = append(keys, key.(int8))
		return true
	})
	sort.Sort(sortableGetter(keys))
	for _, k := range keys {
		if v, ok := s.Load(k); ok {
			if !f(k, v) {
				break
			}
		}
	}
}

//template format
var __formatKTypeToInt8Int = func(i interface{}) int8 {
	switch ii := i.(type) {
	case int:
		return int8(ii)
	case int8:
		return int8(ii)
	case int16:
		return int8(ii)
	case int32:
		return int8(ii)
	case int64:
		return int8(ii)
	case uint:
		return int8(ii)
	case uint8:
		return int8(ii)
	case uint16:
		return int8(ii)
	case uint32:
		return int8(ii)
	case uint64:
		return int8(ii)
	case float32:
		return int8(ii)
	case float64:
		return int8(ii)
	case string:
		iv, err := strconv.ParseInt(ii, 10, 64)
		if err != nil {
			panic(err)
		}
		return int8(iv)
	default:
		panic("unknown type")
	}
}

//template format
var __formatVTypeToInt8Int = func(i interface{}) int {
	switch ii := i.(type) {
	case int:
		return int(ii)
	case int8:
		return int(ii)
	case int16:
		return int(ii)
	case int32:
		return int(ii)
	case int64:
		return int(ii)
	case uint:
		return int(ii)
	case uint8:
		return int(ii)
	case uint16:
		return int(ii)
	case uint32:
		return int(ii)
	case uint64:
		return int(ii)
	case float32:
		return int(ii)
	case float64:
		return int(ii)
	case string:
		iv, err := strconv.ParseInt(ii, 10, 64)
		if err != nil {
			panic(err)
		}
		return int(iv)
	default:
		panic("unknown type")
	}
}
