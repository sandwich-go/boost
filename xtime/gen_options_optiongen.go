// Code generated by optiongen. DO NOT EDIT.
// optiongen: github.com/timestee/optiongen

package xtime

import "time"

// Options should use NewOptions to initialize it
type Options struct {
	// annotation@TickDuration(comment="tick的duration，大于0是自动开启ticker")
	TickDuration time.Duration
	// annotation@TickHostingMode(comment="全托管模式，内部起一个协程执行tick的func")
	TickHostingMode bool
	// annotation@CountGauge(comment="统计tick数量监控")
	TickCount CountGauge
}

// NewOptions new Options
func NewOptions(opts ...Option) *Options {
	cc := newDefaultOptions()
	for _, opt := range opts {
		opt(cc)
	}
	if watchDogOptions != nil {
		watchDogOptions(cc)
	}
	return cc
}

// ApplyOption apply multiple new option
func (cc *Options) ApplyOption(opts ...Option) {
	for _, opt := range opts {
		opt(cc)
	}
}

// Option option func
type Option func(cc *Options)

// WithTickDuration tick的duration，大于0是自动开启ticker
func WithTickDuration(v time.Duration) Option {
	return func(cc *Options) {
		cc.TickDuration = v
	}
}

// WithTickHostingMode 全托管模式，内部起一个协程执行tick的func
func WithTickHostingMode(v bool) Option {
	return func(cc *Options) {
		cc.TickHostingMode = v
	}
}

// WithTickCount option func for filed TickCount
func WithTickCount(v CountGauge) Option {
	return func(cc *Options) {
		cc.TickCount = v
	}
}

// InstallOptionsWatchDog the installed func will called when NewOptions  called
func InstallOptionsWatchDog(dog func(cc *Options)) { watchDogOptions = dog }

// watchDogOptions global watch dog
var watchDogOptions func(cc *Options)

// newDefaultOptions new default Options
func newDefaultOptions() *Options {
	cc := &Options{}

	for _, opt := range [...]Option{
		WithTickDuration(0),
		WithTickHostingMode(true),
		WithTickCount(&noopGauge{}),
	} {
		opt(cc)
	}

	return cc
}

// all getter func
func (cc *Options) GetTickDuration() time.Duration { return cc.TickDuration }
func (cc *Options) GetTickHostingMode() bool       { return cc.TickHostingMode }
func (cc *Options) GetTickCount() CountGauge       { return cc.TickCount }

// OptionsVisitor visitor interface for Options
type OptionsVisitor interface {
	GetTickDuration() time.Duration
	GetTickHostingMode() bool
	GetTickCount() CountGauge
}

// OptionsInterface visitor + ApplyOption interface for Options
type OptionsInterface interface {
	OptionsVisitor
	ApplyOption(...Option)
}
