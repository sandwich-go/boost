// Code generated by optiongen. DO NOT EDIT.
// optiongen: github.com/timestee/optiongen

package rateshaping

import "time"

// Options should use NewOptions to initialize it
type Options struct {
	per   time.Duration
	Slack int
}

// NewOptions new Options
func NewOptions(opts ...Option) *Options {
	cc := newDefaultOptions()
	for _, opt := range opts {
		opt(cc)
	}
	if watchDogOptions != nil {
		watchDogOptions(cc)
	}
	return cc
}

// ApplyOption apply multiple new option
func (cc *Options) ApplyOption(opts ...Option) {
	for _, opt := range opts {
		opt(cc)
	}
}

// Option option func
type Option func(cc *Options)

// WithPer option func for filed per
func WithPer(v time.Duration) Option {
	return func(cc *Options) {
		cc.per = v
	}
}

// WithSlack option func for filed Slack
func WithSlack(v int) Option {
	return func(cc *Options) {
		cc.Slack = v
	}
}

// InstallOptionsWatchDog the installed func will called when NewOptions  called
func InstallOptionsWatchDog(dog func(cc *Options)) { watchDogOptions = dog }

// watchDogOptions global watch dog
var watchDogOptions func(cc *Options)

// newDefaultOptions new default Options
func newDefaultOptions() *Options {
	cc := &Options{}

	for _, opt := range [...]Option{
		WithPer(time.Second),
		WithSlack(10),
	} {
		opt(cc)
	}

	return cc
}

// all getter func
func (cc *Options) GetPer() time.Duration { return cc.per }
func (cc *Options) GetSlack() int         { return cc.Slack }

// OptionsVisitor visitor interface for Options
type OptionsVisitor interface {
	GetPer() time.Duration
	GetSlack() int
}

// OptionsInterface visitor + ApplyOption interface for Options
type OptionsInterface interface {
	OptionsVisitor
	ApplyOption(...Option)
}
