// Code generated by optiongen. DO NOT EDIT.
// optiongen: github.com/timestee/optiongen

package xchan

// Options should use NewOptions to initialize it
type Options struct {
	CallbackOnBufCount int64
	Callback           func(bufCount int64)
}

// NewOptions new Options
func NewOptions(opts ...Option) *Options {
	cc := newDefaultOptions()
	for _, opt := range opts {
		opt(cc)
	}
	if watchDogOptions != nil {
		watchDogOptions(cc)
	}
	return cc
}

// ApplyOption apply multiple new option
func (cc *Options) ApplyOption(opts ...Option) {
	for _, opt := range opts {
		opt(cc)
	}
}

// Option option func
type Option func(cc *Options)

// WithCallbackOnBufCount option func for filed CallbackOnBufCount
func WithCallbackOnBufCount(v int64) Option {
	return func(cc *Options) {
		cc.CallbackOnBufCount = v
	}
}

// WithCallback option func for filed Callback
func WithCallback(v func(bufCount int64)) Option {
	return func(cc *Options) {
		cc.Callback = v
	}
}

// InstallOptionsWatchDog the installed func will called when NewOptions  called
func InstallOptionsWatchDog(dog func(cc *Options)) { watchDogOptions = dog }

// watchDogOptions global watch dog
var watchDogOptions func(cc *Options)

// newDefaultOptions new default Options
func newDefaultOptions() *Options {
	cc := &Options{}

	for _, opt := range [...]Option{
		WithCallbackOnBufCount(0),
		WithCallback(nil),
	} {
		opt(cc)
	}

	return cc
}

// all getter func
func (cc *Options) GetCallbackOnBufCount() int64      { return cc.CallbackOnBufCount }
func (cc *Options) GetCallback() func(bufCount int64) { return cc.Callback }

// OptionsVisitor visitor interface for Options
type OptionsVisitor interface {
	GetCallbackOnBufCount() int64
	GetCallback() func(bufCount int64)
}

// OptionsInterface visitor + ApplyOption interface for Options
type OptionsInterface interface {
	OptionsVisitor
	ApplyOption(...Option)
}
