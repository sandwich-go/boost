// Code generated by tools. DO NOT EDIT.
package xmap

import (
	. "github.com/smartystreets/goconvey/convey"
	"strconv"
	"testing"
)

func TestEqualMap(t *testing.T) {
	Convey("EqualFloat32Float32Map", t, func() {
		So(EqualFloat32Float32Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[float32]float32), make(map[float32]float32)
		So(EqualFloat32Float32Map(a, nil), ShouldBeFalse)
		So(EqualFloat32Float32Map(nil, a), ShouldBeFalse)
		So(EqualFloat32Float32Map(a, b), ShouldBeTrue)

		var key float32
		var value float32
		for i := 0; i < 100; i++ {
			key = float32(i)
			value = float32(i)
			a[key] = value
			b[key] = value
		}
		So(EqualFloat32Float32Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualFloat32Float32Map(a, b), ShouldBeFalse)
	})

	Convey("EqualFloat32Float64Map", t, func() {
		So(EqualFloat32Float64Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[float32]float64), make(map[float32]float64)
		So(EqualFloat32Float64Map(a, nil), ShouldBeFalse)
		So(EqualFloat32Float64Map(nil, a), ShouldBeFalse)
		So(EqualFloat32Float64Map(a, b), ShouldBeTrue)

		var key float32
		var value float64
		for i := 0; i < 100; i++ {
			key = float32(i)
			value = float64(i)
			a[key] = value
			b[key] = value
		}
		So(EqualFloat32Float64Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualFloat32Float64Map(a, b), ShouldBeFalse)
	})

	Convey("EqualFloat32IntMap", t, func() {
		So(EqualFloat32IntMap(nil, nil), ShouldBeTrue)
		var a, b = make(map[float32]int), make(map[float32]int)
		So(EqualFloat32IntMap(a, nil), ShouldBeFalse)
		So(EqualFloat32IntMap(nil, a), ShouldBeFalse)
		So(EqualFloat32IntMap(a, b), ShouldBeTrue)

		var key float32
		var value int
		for i := 0; i < 100; i++ {
			key = float32(i)
			value = i
			a[key] = value
			b[key] = value
		}
		So(EqualFloat32IntMap(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualFloat32IntMap(a, b), ShouldBeFalse)
	})

	Convey("EqualFloat32Int16Map", t, func() {
		So(EqualFloat32Int16Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[float32]int16), make(map[float32]int16)
		So(EqualFloat32Int16Map(a, nil), ShouldBeFalse)
		So(EqualFloat32Int16Map(nil, a), ShouldBeFalse)
		So(EqualFloat32Int16Map(a, b), ShouldBeTrue)

		var key float32
		var value int16
		for i := 0; i < 100; i++ {
			key = float32(i)
			value = int16(i)
			a[key] = value
			b[key] = value
		}
		So(EqualFloat32Int16Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualFloat32Int16Map(a, b), ShouldBeFalse)
	})

	Convey("EqualFloat32Int32Map", t, func() {
		So(EqualFloat32Int32Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[float32]int32), make(map[float32]int32)
		So(EqualFloat32Int32Map(a, nil), ShouldBeFalse)
		So(EqualFloat32Int32Map(nil, a), ShouldBeFalse)
		So(EqualFloat32Int32Map(a, b), ShouldBeTrue)

		var key float32
		var value int32
		for i := 0; i < 100; i++ {
			key = float32(i)
			value = int32(i)
			a[key] = value
			b[key] = value
		}
		So(EqualFloat32Int32Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualFloat32Int32Map(a, b), ShouldBeFalse)
	})

	Convey("EqualFloat32Int64Map", t, func() {
		So(EqualFloat32Int64Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[float32]int64), make(map[float32]int64)
		So(EqualFloat32Int64Map(a, nil), ShouldBeFalse)
		So(EqualFloat32Int64Map(nil, a), ShouldBeFalse)
		So(EqualFloat32Int64Map(a, b), ShouldBeTrue)

		var key float32
		var value int64
		for i := 0; i < 100; i++ {
			key = float32(i)
			value = int64(i)
			a[key] = value
			b[key] = value
		}
		So(EqualFloat32Int64Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualFloat32Int64Map(a, b), ShouldBeFalse)
	})

	Convey("EqualFloat32Int8Map", t, func() {
		So(EqualFloat32Int8Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[float32]int8), make(map[float32]int8)
		So(EqualFloat32Int8Map(a, nil), ShouldBeFalse)
		So(EqualFloat32Int8Map(nil, a), ShouldBeFalse)
		So(EqualFloat32Int8Map(a, b), ShouldBeTrue)

		var key float32
		var value int8
		for i := 0; i < 100; i++ {
			key = float32(i)
			value = int8(i)
			a[key] = value
			b[key] = value
		}
		So(EqualFloat32Int8Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualFloat32Int8Map(a, b), ShouldBeFalse)
	})

	Convey("EqualFloat32StringMap", t, func() {
		So(EqualFloat32StringMap(nil, nil), ShouldBeTrue)
		var a, b = make(map[float32]string), make(map[float32]string)
		So(EqualFloat32StringMap(a, nil), ShouldBeFalse)
		So(EqualFloat32StringMap(nil, a), ShouldBeFalse)
		So(EqualFloat32StringMap(a, b), ShouldBeTrue)

		var key float32
		var value string
		for i := 0; i < 100; i++ {
			key = float32(i)
			value = strconv.FormatInt(int64(i), 10)
			a[key] = value
			b[key] = value
		}
		So(EqualFloat32StringMap(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualFloat32StringMap(a, b), ShouldBeFalse)
	})

	Convey("EqualFloat32UintMap", t, func() {
		So(EqualFloat32UintMap(nil, nil), ShouldBeTrue)
		var a, b = make(map[float32]uint), make(map[float32]uint)
		So(EqualFloat32UintMap(a, nil), ShouldBeFalse)
		So(EqualFloat32UintMap(nil, a), ShouldBeFalse)
		So(EqualFloat32UintMap(a, b), ShouldBeTrue)

		var key float32
		var value uint
		for i := 0; i < 100; i++ {
			key = float32(i)
			value = uint(i)
			a[key] = value
			b[key] = value
		}
		So(EqualFloat32UintMap(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualFloat32UintMap(a, b), ShouldBeFalse)
	})

	Convey("EqualFloat32Uint16Map", t, func() {
		So(EqualFloat32Uint16Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[float32]uint16), make(map[float32]uint16)
		So(EqualFloat32Uint16Map(a, nil), ShouldBeFalse)
		So(EqualFloat32Uint16Map(nil, a), ShouldBeFalse)
		So(EqualFloat32Uint16Map(a, b), ShouldBeTrue)

		var key float32
		var value uint16
		for i := 0; i < 100; i++ {
			key = float32(i)
			value = uint16(i)
			a[key] = value
			b[key] = value
		}
		So(EqualFloat32Uint16Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualFloat32Uint16Map(a, b), ShouldBeFalse)
	})

	Convey("EqualFloat32Uint32Map", t, func() {
		So(EqualFloat32Uint32Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[float32]uint32), make(map[float32]uint32)
		So(EqualFloat32Uint32Map(a, nil), ShouldBeFalse)
		So(EqualFloat32Uint32Map(nil, a), ShouldBeFalse)
		So(EqualFloat32Uint32Map(a, b), ShouldBeTrue)

		var key float32
		var value uint32
		for i := 0; i < 100; i++ {
			key = float32(i)
			value = uint32(i)
			a[key] = value
			b[key] = value
		}
		So(EqualFloat32Uint32Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualFloat32Uint32Map(a, b), ShouldBeFalse)
	})

	Convey("EqualFloat32Uint64Map", t, func() {
		So(EqualFloat32Uint64Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[float32]uint64), make(map[float32]uint64)
		So(EqualFloat32Uint64Map(a, nil), ShouldBeFalse)
		So(EqualFloat32Uint64Map(nil, a), ShouldBeFalse)
		So(EqualFloat32Uint64Map(a, b), ShouldBeTrue)

		var key float32
		var value uint64
		for i := 0; i < 100; i++ {
			key = float32(i)
			value = uint64(i)
			a[key] = value
			b[key] = value
		}
		So(EqualFloat32Uint64Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualFloat32Uint64Map(a, b), ShouldBeFalse)
	})

	Convey("EqualFloat32Uint8Map", t, func() {
		So(EqualFloat32Uint8Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[float32]uint8), make(map[float32]uint8)
		So(EqualFloat32Uint8Map(a, nil), ShouldBeFalse)
		So(EqualFloat32Uint8Map(nil, a), ShouldBeFalse)
		So(EqualFloat32Uint8Map(a, b), ShouldBeTrue)

		var key float32
		var value uint8
		for i := 0; i < 100; i++ {
			key = float32(i)
			value = uint8(i)
			a[key] = value
			b[key] = value
		}
		So(EqualFloat32Uint8Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualFloat32Uint8Map(a, b), ShouldBeFalse)
	})

	Convey("EqualFloat64Float32Map", t, func() {
		So(EqualFloat64Float32Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[float64]float32), make(map[float64]float32)
		So(EqualFloat64Float32Map(a, nil), ShouldBeFalse)
		So(EqualFloat64Float32Map(nil, a), ShouldBeFalse)
		So(EqualFloat64Float32Map(a, b), ShouldBeTrue)

		var key float64
		var value float32
		for i := 0; i < 100; i++ {
			key = float64(i)
			value = float32(i)
			a[key] = value
			b[key] = value
		}
		So(EqualFloat64Float32Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualFloat64Float32Map(a, b), ShouldBeFalse)
	})

	Convey("EqualFloat64Float64Map", t, func() {
		So(EqualFloat64Float64Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[float64]float64), make(map[float64]float64)
		So(EqualFloat64Float64Map(a, nil), ShouldBeFalse)
		So(EqualFloat64Float64Map(nil, a), ShouldBeFalse)
		So(EqualFloat64Float64Map(a, b), ShouldBeTrue)

		var key float64
		var value float64
		for i := 0; i < 100; i++ {
			key = float64(i)
			value = float64(i)
			a[key] = value
			b[key] = value
		}
		So(EqualFloat64Float64Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualFloat64Float64Map(a, b), ShouldBeFalse)
	})

	Convey("EqualFloat64IntMap", t, func() {
		So(EqualFloat64IntMap(nil, nil), ShouldBeTrue)
		var a, b = make(map[float64]int), make(map[float64]int)
		So(EqualFloat64IntMap(a, nil), ShouldBeFalse)
		So(EqualFloat64IntMap(nil, a), ShouldBeFalse)
		So(EqualFloat64IntMap(a, b), ShouldBeTrue)

		var key float64
		var value int
		for i := 0; i < 100; i++ {
			key = float64(i)
			value = i
			a[key] = value
			b[key] = value
		}
		So(EqualFloat64IntMap(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualFloat64IntMap(a, b), ShouldBeFalse)
	})

	Convey("EqualFloat64Int16Map", t, func() {
		So(EqualFloat64Int16Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[float64]int16), make(map[float64]int16)
		So(EqualFloat64Int16Map(a, nil), ShouldBeFalse)
		So(EqualFloat64Int16Map(nil, a), ShouldBeFalse)
		So(EqualFloat64Int16Map(a, b), ShouldBeTrue)

		var key float64
		var value int16
		for i := 0; i < 100; i++ {
			key = float64(i)
			value = int16(i)
			a[key] = value
			b[key] = value
		}
		So(EqualFloat64Int16Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualFloat64Int16Map(a, b), ShouldBeFalse)
	})

	Convey("EqualFloat64Int32Map", t, func() {
		So(EqualFloat64Int32Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[float64]int32), make(map[float64]int32)
		So(EqualFloat64Int32Map(a, nil), ShouldBeFalse)
		So(EqualFloat64Int32Map(nil, a), ShouldBeFalse)
		So(EqualFloat64Int32Map(a, b), ShouldBeTrue)

		var key float64
		var value int32
		for i := 0; i < 100; i++ {
			key = float64(i)
			value = int32(i)
			a[key] = value
			b[key] = value
		}
		So(EqualFloat64Int32Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualFloat64Int32Map(a, b), ShouldBeFalse)
	})

	Convey("EqualFloat64Int64Map", t, func() {
		So(EqualFloat64Int64Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[float64]int64), make(map[float64]int64)
		So(EqualFloat64Int64Map(a, nil), ShouldBeFalse)
		So(EqualFloat64Int64Map(nil, a), ShouldBeFalse)
		So(EqualFloat64Int64Map(a, b), ShouldBeTrue)

		var key float64
		var value int64
		for i := 0; i < 100; i++ {
			key = float64(i)
			value = int64(i)
			a[key] = value
			b[key] = value
		}
		So(EqualFloat64Int64Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualFloat64Int64Map(a, b), ShouldBeFalse)
	})

	Convey("EqualFloat64Int8Map", t, func() {
		So(EqualFloat64Int8Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[float64]int8), make(map[float64]int8)
		So(EqualFloat64Int8Map(a, nil), ShouldBeFalse)
		So(EqualFloat64Int8Map(nil, a), ShouldBeFalse)
		So(EqualFloat64Int8Map(a, b), ShouldBeTrue)

		var key float64
		var value int8
		for i := 0; i < 100; i++ {
			key = float64(i)
			value = int8(i)
			a[key] = value
			b[key] = value
		}
		So(EqualFloat64Int8Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualFloat64Int8Map(a, b), ShouldBeFalse)
	})

	Convey("EqualFloat64StringMap", t, func() {
		So(EqualFloat64StringMap(nil, nil), ShouldBeTrue)
		var a, b = make(map[float64]string), make(map[float64]string)
		So(EqualFloat64StringMap(a, nil), ShouldBeFalse)
		So(EqualFloat64StringMap(nil, a), ShouldBeFalse)
		So(EqualFloat64StringMap(a, b), ShouldBeTrue)

		var key float64
		var value string
		for i := 0; i < 100; i++ {
			key = float64(i)
			value = strconv.FormatInt(int64(i), 10)
			a[key] = value
			b[key] = value
		}
		So(EqualFloat64StringMap(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualFloat64StringMap(a, b), ShouldBeFalse)
	})

	Convey("EqualFloat64UintMap", t, func() {
		So(EqualFloat64UintMap(nil, nil), ShouldBeTrue)
		var a, b = make(map[float64]uint), make(map[float64]uint)
		So(EqualFloat64UintMap(a, nil), ShouldBeFalse)
		So(EqualFloat64UintMap(nil, a), ShouldBeFalse)
		So(EqualFloat64UintMap(a, b), ShouldBeTrue)

		var key float64
		var value uint
		for i := 0; i < 100; i++ {
			key = float64(i)
			value = uint(i)
			a[key] = value
			b[key] = value
		}
		So(EqualFloat64UintMap(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualFloat64UintMap(a, b), ShouldBeFalse)
	})

	Convey("EqualFloat64Uint16Map", t, func() {
		So(EqualFloat64Uint16Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[float64]uint16), make(map[float64]uint16)
		So(EqualFloat64Uint16Map(a, nil), ShouldBeFalse)
		So(EqualFloat64Uint16Map(nil, a), ShouldBeFalse)
		So(EqualFloat64Uint16Map(a, b), ShouldBeTrue)

		var key float64
		var value uint16
		for i := 0; i < 100; i++ {
			key = float64(i)
			value = uint16(i)
			a[key] = value
			b[key] = value
		}
		So(EqualFloat64Uint16Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualFloat64Uint16Map(a, b), ShouldBeFalse)
	})

	Convey("EqualFloat64Uint32Map", t, func() {
		So(EqualFloat64Uint32Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[float64]uint32), make(map[float64]uint32)
		So(EqualFloat64Uint32Map(a, nil), ShouldBeFalse)
		So(EqualFloat64Uint32Map(nil, a), ShouldBeFalse)
		So(EqualFloat64Uint32Map(a, b), ShouldBeTrue)

		var key float64
		var value uint32
		for i := 0; i < 100; i++ {
			key = float64(i)
			value = uint32(i)
			a[key] = value
			b[key] = value
		}
		So(EqualFloat64Uint32Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualFloat64Uint32Map(a, b), ShouldBeFalse)
	})

	Convey("EqualFloat64Uint64Map", t, func() {
		So(EqualFloat64Uint64Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[float64]uint64), make(map[float64]uint64)
		So(EqualFloat64Uint64Map(a, nil), ShouldBeFalse)
		So(EqualFloat64Uint64Map(nil, a), ShouldBeFalse)
		So(EqualFloat64Uint64Map(a, b), ShouldBeTrue)

		var key float64
		var value uint64
		for i := 0; i < 100; i++ {
			key = float64(i)
			value = uint64(i)
			a[key] = value
			b[key] = value
		}
		So(EqualFloat64Uint64Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualFloat64Uint64Map(a, b), ShouldBeFalse)
	})

	Convey("EqualFloat64Uint8Map", t, func() {
		So(EqualFloat64Uint8Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[float64]uint8), make(map[float64]uint8)
		So(EqualFloat64Uint8Map(a, nil), ShouldBeFalse)
		So(EqualFloat64Uint8Map(nil, a), ShouldBeFalse)
		So(EqualFloat64Uint8Map(a, b), ShouldBeTrue)

		var key float64
		var value uint8
		for i := 0; i < 100; i++ {
			key = float64(i)
			value = uint8(i)
			a[key] = value
			b[key] = value
		}
		So(EqualFloat64Uint8Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualFloat64Uint8Map(a, b), ShouldBeFalse)
	})

	Convey("EqualIntFloat32Map", t, func() {
		So(EqualIntFloat32Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[int]float32), make(map[int]float32)
		So(EqualIntFloat32Map(a, nil), ShouldBeFalse)
		So(EqualIntFloat32Map(nil, a), ShouldBeFalse)
		So(EqualIntFloat32Map(a, b), ShouldBeTrue)

		var key int
		var value float32
		for i := 0; i < 100; i++ {
			key = i
			value = float32(i)
			a[key] = value
			b[key] = value
		}
		So(EqualIntFloat32Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualIntFloat32Map(a, b), ShouldBeFalse)
	})

	Convey("EqualIntFloat64Map", t, func() {
		So(EqualIntFloat64Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[int]float64), make(map[int]float64)
		So(EqualIntFloat64Map(a, nil), ShouldBeFalse)
		So(EqualIntFloat64Map(nil, a), ShouldBeFalse)
		So(EqualIntFloat64Map(a, b), ShouldBeTrue)

		var key int
		var value float64
		for i := 0; i < 100; i++ {
			key = i
			value = float64(i)
			a[key] = value
			b[key] = value
		}
		So(EqualIntFloat64Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualIntFloat64Map(a, b), ShouldBeFalse)
	})

	Convey("EqualIntIntMap", t, func() {
		So(EqualIntIntMap(nil, nil), ShouldBeTrue)
		var a, b = make(map[int]int), make(map[int]int)
		So(EqualIntIntMap(a, nil), ShouldBeFalse)
		So(EqualIntIntMap(nil, a), ShouldBeFalse)
		So(EqualIntIntMap(a, b), ShouldBeTrue)

		var key int
		var value int
		for i := 0; i < 100; i++ {
			key = i
			value = i
			a[key] = value
			b[key] = value
		}
		So(EqualIntIntMap(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualIntIntMap(a, b), ShouldBeFalse)
	})

	Convey("EqualIntInt16Map", t, func() {
		So(EqualIntInt16Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[int]int16), make(map[int]int16)
		So(EqualIntInt16Map(a, nil), ShouldBeFalse)
		So(EqualIntInt16Map(nil, a), ShouldBeFalse)
		So(EqualIntInt16Map(a, b), ShouldBeTrue)

		var key int
		var value int16
		for i := 0; i < 100; i++ {
			key = i
			value = int16(i)
			a[key] = value
			b[key] = value
		}
		So(EqualIntInt16Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualIntInt16Map(a, b), ShouldBeFalse)
	})

	Convey("EqualIntInt32Map", t, func() {
		So(EqualIntInt32Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[int]int32), make(map[int]int32)
		So(EqualIntInt32Map(a, nil), ShouldBeFalse)
		So(EqualIntInt32Map(nil, a), ShouldBeFalse)
		So(EqualIntInt32Map(a, b), ShouldBeTrue)

		var key int
		var value int32
		for i := 0; i < 100; i++ {
			key = i
			value = int32(i)
			a[key] = value
			b[key] = value
		}
		So(EqualIntInt32Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualIntInt32Map(a, b), ShouldBeFalse)
	})

	Convey("EqualIntInt64Map", t, func() {
		So(EqualIntInt64Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[int]int64), make(map[int]int64)
		So(EqualIntInt64Map(a, nil), ShouldBeFalse)
		So(EqualIntInt64Map(nil, a), ShouldBeFalse)
		So(EqualIntInt64Map(a, b), ShouldBeTrue)

		var key int
		var value int64
		for i := 0; i < 100; i++ {
			key = i
			value = int64(i)
			a[key] = value
			b[key] = value
		}
		So(EqualIntInt64Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualIntInt64Map(a, b), ShouldBeFalse)
	})

	Convey("EqualIntInt8Map", t, func() {
		So(EqualIntInt8Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[int]int8), make(map[int]int8)
		So(EqualIntInt8Map(a, nil), ShouldBeFalse)
		So(EqualIntInt8Map(nil, a), ShouldBeFalse)
		So(EqualIntInt8Map(a, b), ShouldBeTrue)

		var key int
		var value int8
		for i := 0; i < 100; i++ {
			key = i
			value = int8(i)
			a[key] = value
			b[key] = value
		}
		So(EqualIntInt8Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualIntInt8Map(a, b), ShouldBeFalse)
	})

	Convey("EqualIntStringMap", t, func() {
		So(EqualIntStringMap(nil, nil), ShouldBeTrue)
		var a, b = make(map[int]string), make(map[int]string)
		So(EqualIntStringMap(a, nil), ShouldBeFalse)
		So(EqualIntStringMap(nil, a), ShouldBeFalse)
		So(EqualIntStringMap(a, b), ShouldBeTrue)

		var key int
		var value string
		for i := 0; i < 100; i++ {
			key = i
			value = strconv.FormatInt(int64(i), 10)
			a[key] = value
			b[key] = value
		}
		So(EqualIntStringMap(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualIntStringMap(a, b), ShouldBeFalse)
	})

	Convey("EqualIntUintMap", t, func() {
		So(EqualIntUintMap(nil, nil), ShouldBeTrue)
		var a, b = make(map[int]uint), make(map[int]uint)
		So(EqualIntUintMap(a, nil), ShouldBeFalse)
		So(EqualIntUintMap(nil, a), ShouldBeFalse)
		So(EqualIntUintMap(a, b), ShouldBeTrue)

		var key int
		var value uint
		for i := 0; i < 100; i++ {
			key = i
			value = uint(i)
			a[key] = value
			b[key] = value
		}
		So(EqualIntUintMap(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualIntUintMap(a, b), ShouldBeFalse)
	})

	Convey("EqualIntUint16Map", t, func() {
		So(EqualIntUint16Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[int]uint16), make(map[int]uint16)
		So(EqualIntUint16Map(a, nil), ShouldBeFalse)
		So(EqualIntUint16Map(nil, a), ShouldBeFalse)
		So(EqualIntUint16Map(a, b), ShouldBeTrue)

		var key int
		var value uint16
		for i := 0; i < 100; i++ {
			key = i
			value = uint16(i)
			a[key] = value
			b[key] = value
		}
		So(EqualIntUint16Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualIntUint16Map(a, b), ShouldBeFalse)
	})

	Convey("EqualIntUint32Map", t, func() {
		So(EqualIntUint32Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[int]uint32), make(map[int]uint32)
		So(EqualIntUint32Map(a, nil), ShouldBeFalse)
		So(EqualIntUint32Map(nil, a), ShouldBeFalse)
		So(EqualIntUint32Map(a, b), ShouldBeTrue)

		var key int
		var value uint32
		for i := 0; i < 100; i++ {
			key = i
			value = uint32(i)
			a[key] = value
			b[key] = value
		}
		So(EqualIntUint32Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualIntUint32Map(a, b), ShouldBeFalse)
	})

	Convey("EqualIntUint64Map", t, func() {
		So(EqualIntUint64Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[int]uint64), make(map[int]uint64)
		So(EqualIntUint64Map(a, nil), ShouldBeFalse)
		So(EqualIntUint64Map(nil, a), ShouldBeFalse)
		So(EqualIntUint64Map(a, b), ShouldBeTrue)

		var key int
		var value uint64
		for i := 0; i < 100; i++ {
			key = i
			value = uint64(i)
			a[key] = value
			b[key] = value
		}
		So(EqualIntUint64Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualIntUint64Map(a, b), ShouldBeFalse)
	})

	Convey("EqualIntUint8Map", t, func() {
		So(EqualIntUint8Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[int]uint8), make(map[int]uint8)
		So(EqualIntUint8Map(a, nil), ShouldBeFalse)
		So(EqualIntUint8Map(nil, a), ShouldBeFalse)
		So(EqualIntUint8Map(a, b), ShouldBeTrue)

		var key int
		var value uint8
		for i := 0; i < 100; i++ {
			key = i
			value = uint8(i)
			a[key] = value
			b[key] = value
		}
		So(EqualIntUint8Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualIntUint8Map(a, b), ShouldBeFalse)
	})

	Convey("EqualInt16Float32Map", t, func() {
		So(EqualInt16Float32Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[int16]float32), make(map[int16]float32)
		So(EqualInt16Float32Map(a, nil), ShouldBeFalse)
		So(EqualInt16Float32Map(nil, a), ShouldBeFalse)
		So(EqualInt16Float32Map(a, b), ShouldBeTrue)

		var key int16
		var value float32
		for i := 0; i < 100; i++ {
			key = int16(i)
			value = float32(i)
			a[key] = value
			b[key] = value
		}
		So(EqualInt16Float32Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualInt16Float32Map(a, b), ShouldBeFalse)
	})

	Convey("EqualInt16Float64Map", t, func() {
		So(EqualInt16Float64Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[int16]float64), make(map[int16]float64)
		So(EqualInt16Float64Map(a, nil), ShouldBeFalse)
		So(EqualInt16Float64Map(nil, a), ShouldBeFalse)
		So(EqualInt16Float64Map(a, b), ShouldBeTrue)

		var key int16
		var value float64
		for i := 0; i < 100; i++ {
			key = int16(i)
			value = float64(i)
			a[key] = value
			b[key] = value
		}
		So(EqualInt16Float64Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualInt16Float64Map(a, b), ShouldBeFalse)
	})

	Convey("EqualInt16IntMap", t, func() {
		So(EqualInt16IntMap(nil, nil), ShouldBeTrue)
		var a, b = make(map[int16]int), make(map[int16]int)
		So(EqualInt16IntMap(a, nil), ShouldBeFalse)
		So(EqualInt16IntMap(nil, a), ShouldBeFalse)
		So(EqualInt16IntMap(a, b), ShouldBeTrue)

		var key int16
		var value int
		for i := 0; i < 100; i++ {
			key = int16(i)
			value = i
			a[key] = value
			b[key] = value
		}
		So(EqualInt16IntMap(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualInt16IntMap(a, b), ShouldBeFalse)
	})

	Convey("EqualInt16Int16Map", t, func() {
		So(EqualInt16Int16Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[int16]int16), make(map[int16]int16)
		So(EqualInt16Int16Map(a, nil), ShouldBeFalse)
		So(EqualInt16Int16Map(nil, a), ShouldBeFalse)
		So(EqualInt16Int16Map(a, b), ShouldBeTrue)

		var key int16
		var value int16
		for i := 0; i < 100; i++ {
			key = int16(i)
			value = int16(i)
			a[key] = value
			b[key] = value
		}
		So(EqualInt16Int16Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualInt16Int16Map(a, b), ShouldBeFalse)
	})

	Convey("EqualInt16Int32Map", t, func() {
		So(EqualInt16Int32Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[int16]int32), make(map[int16]int32)
		So(EqualInt16Int32Map(a, nil), ShouldBeFalse)
		So(EqualInt16Int32Map(nil, a), ShouldBeFalse)
		So(EqualInt16Int32Map(a, b), ShouldBeTrue)

		var key int16
		var value int32
		for i := 0; i < 100; i++ {
			key = int16(i)
			value = int32(i)
			a[key] = value
			b[key] = value
		}
		So(EqualInt16Int32Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualInt16Int32Map(a, b), ShouldBeFalse)
	})

	Convey("EqualInt16Int64Map", t, func() {
		So(EqualInt16Int64Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[int16]int64), make(map[int16]int64)
		So(EqualInt16Int64Map(a, nil), ShouldBeFalse)
		So(EqualInt16Int64Map(nil, a), ShouldBeFalse)
		So(EqualInt16Int64Map(a, b), ShouldBeTrue)

		var key int16
		var value int64
		for i := 0; i < 100; i++ {
			key = int16(i)
			value = int64(i)
			a[key] = value
			b[key] = value
		}
		So(EqualInt16Int64Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualInt16Int64Map(a, b), ShouldBeFalse)
	})

	Convey("EqualInt16Int8Map", t, func() {
		So(EqualInt16Int8Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[int16]int8), make(map[int16]int8)
		So(EqualInt16Int8Map(a, nil), ShouldBeFalse)
		So(EqualInt16Int8Map(nil, a), ShouldBeFalse)
		So(EqualInt16Int8Map(a, b), ShouldBeTrue)

		var key int16
		var value int8
		for i := 0; i < 100; i++ {
			key = int16(i)
			value = int8(i)
			a[key] = value
			b[key] = value
		}
		So(EqualInt16Int8Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualInt16Int8Map(a, b), ShouldBeFalse)
	})

	Convey("EqualInt16StringMap", t, func() {
		So(EqualInt16StringMap(nil, nil), ShouldBeTrue)
		var a, b = make(map[int16]string), make(map[int16]string)
		So(EqualInt16StringMap(a, nil), ShouldBeFalse)
		So(EqualInt16StringMap(nil, a), ShouldBeFalse)
		So(EqualInt16StringMap(a, b), ShouldBeTrue)

		var key int16
		var value string
		for i := 0; i < 100; i++ {
			key = int16(i)
			value = strconv.FormatInt(int64(i), 10)
			a[key] = value
			b[key] = value
		}
		So(EqualInt16StringMap(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualInt16StringMap(a, b), ShouldBeFalse)
	})

	Convey("EqualInt16UintMap", t, func() {
		So(EqualInt16UintMap(nil, nil), ShouldBeTrue)
		var a, b = make(map[int16]uint), make(map[int16]uint)
		So(EqualInt16UintMap(a, nil), ShouldBeFalse)
		So(EqualInt16UintMap(nil, a), ShouldBeFalse)
		So(EqualInt16UintMap(a, b), ShouldBeTrue)

		var key int16
		var value uint
		for i := 0; i < 100; i++ {
			key = int16(i)
			value = uint(i)
			a[key] = value
			b[key] = value
		}
		So(EqualInt16UintMap(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualInt16UintMap(a, b), ShouldBeFalse)
	})

	Convey("EqualInt16Uint16Map", t, func() {
		So(EqualInt16Uint16Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[int16]uint16), make(map[int16]uint16)
		So(EqualInt16Uint16Map(a, nil), ShouldBeFalse)
		So(EqualInt16Uint16Map(nil, a), ShouldBeFalse)
		So(EqualInt16Uint16Map(a, b), ShouldBeTrue)

		var key int16
		var value uint16
		for i := 0; i < 100; i++ {
			key = int16(i)
			value = uint16(i)
			a[key] = value
			b[key] = value
		}
		So(EqualInt16Uint16Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualInt16Uint16Map(a, b), ShouldBeFalse)
	})

	Convey("EqualInt16Uint32Map", t, func() {
		So(EqualInt16Uint32Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[int16]uint32), make(map[int16]uint32)
		So(EqualInt16Uint32Map(a, nil), ShouldBeFalse)
		So(EqualInt16Uint32Map(nil, a), ShouldBeFalse)
		So(EqualInt16Uint32Map(a, b), ShouldBeTrue)

		var key int16
		var value uint32
		for i := 0; i < 100; i++ {
			key = int16(i)
			value = uint32(i)
			a[key] = value
			b[key] = value
		}
		So(EqualInt16Uint32Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualInt16Uint32Map(a, b), ShouldBeFalse)
	})

	Convey("EqualInt16Uint64Map", t, func() {
		So(EqualInt16Uint64Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[int16]uint64), make(map[int16]uint64)
		So(EqualInt16Uint64Map(a, nil), ShouldBeFalse)
		So(EqualInt16Uint64Map(nil, a), ShouldBeFalse)
		So(EqualInt16Uint64Map(a, b), ShouldBeTrue)

		var key int16
		var value uint64
		for i := 0; i < 100; i++ {
			key = int16(i)
			value = uint64(i)
			a[key] = value
			b[key] = value
		}
		So(EqualInt16Uint64Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualInt16Uint64Map(a, b), ShouldBeFalse)
	})

	Convey("EqualInt16Uint8Map", t, func() {
		So(EqualInt16Uint8Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[int16]uint8), make(map[int16]uint8)
		So(EqualInt16Uint8Map(a, nil), ShouldBeFalse)
		So(EqualInt16Uint8Map(nil, a), ShouldBeFalse)
		So(EqualInt16Uint8Map(a, b), ShouldBeTrue)

		var key int16
		var value uint8
		for i := 0; i < 100; i++ {
			key = int16(i)
			value = uint8(i)
			a[key] = value
			b[key] = value
		}
		So(EqualInt16Uint8Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualInt16Uint8Map(a, b), ShouldBeFalse)
	})

	Convey("EqualInt32Float32Map", t, func() {
		So(EqualInt32Float32Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[int32]float32), make(map[int32]float32)
		So(EqualInt32Float32Map(a, nil), ShouldBeFalse)
		So(EqualInt32Float32Map(nil, a), ShouldBeFalse)
		So(EqualInt32Float32Map(a, b), ShouldBeTrue)

		var key int32
		var value float32
		for i := 0; i < 100; i++ {
			key = int32(i)
			value = float32(i)
			a[key] = value
			b[key] = value
		}
		So(EqualInt32Float32Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualInt32Float32Map(a, b), ShouldBeFalse)
	})

	Convey("EqualInt32Float64Map", t, func() {
		So(EqualInt32Float64Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[int32]float64), make(map[int32]float64)
		So(EqualInt32Float64Map(a, nil), ShouldBeFalse)
		So(EqualInt32Float64Map(nil, a), ShouldBeFalse)
		So(EqualInt32Float64Map(a, b), ShouldBeTrue)

		var key int32
		var value float64
		for i := 0; i < 100; i++ {
			key = int32(i)
			value = float64(i)
			a[key] = value
			b[key] = value
		}
		So(EqualInt32Float64Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualInt32Float64Map(a, b), ShouldBeFalse)
	})

	Convey("EqualInt32IntMap", t, func() {
		So(EqualInt32IntMap(nil, nil), ShouldBeTrue)
		var a, b = make(map[int32]int), make(map[int32]int)
		So(EqualInt32IntMap(a, nil), ShouldBeFalse)
		So(EqualInt32IntMap(nil, a), ShouldBeFalse)
		So(EqualInt32IntMap(a, b), ShouldBeTrue)

		var key int32
		var value int
		for i := 0; i < 100; i++ {
			key = int32(i)
			value = i
			a[key] = value
			b[key] = value
		}
		So(EqualInt32IntMap(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualInt32IntMap(a, b), ShouldBeFalse)
	})

	Convey("EqualInt32Int16Map", t, func() {
		So(EqualInt32Int16Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[int32]int16), make(map[int32]int16)
		So(EqualInt32Int16Map(a, nil), ShouldBeFalse)
		So(EqualInt32Int16Map(nil, a), ShouldBeFalse)
		So(EqualInt32Int16Map(a, b), ShouldBeTrue)

		var key int32
		var value int16
		for i := 0; i < 100; i++ {
			key = int32(i)
			value = int16(i)
			a[key] = value
			b[key] = value
		}
		So(EqualInt32Int16Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualInt32Int16Map(a, b), ShouldBeFalse)
	})

	Convey("EqualInt32Int32Map", t, func() {
		So(EqualInt32Int32Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[int32]int32), make(map[int32]int32)
		So(EqualInt32Int32Map(a, nil), ShouldBeFalse)
		So(EqualInt32Int32Map(nil, a), ShouldBeFalse)
		So(EqualInt32Int32Map(a, b), ShouldBeTrue)

		var key int32
		var value int32
		for i := 0; i < 100; i++ {
			key = int32(i)
			value = int32(i)
			a[key] = value
			b[key] = value
		}
		So(EqualInt32Int32Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualInt32Int32Map(a, b), ShouldBeFalse)
	})

	Convey("EqualInt32Int64Map", t, func() {
		So(EqualInt32Int64Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[int32]int64), make(map[int32]int64)
		So(EqualInt32Int64Map(a, nil), ShouldBeFalse)
		So(EqualInt32Int64Map(nil, a), ShouldBeFalse)
		So(EqualInt32Int64Map(a, b), ShouldBeTrue)

		var key int32
		var value int64
		for i := 0; i < 100; i++ {
			key = int32(i)
			value = int64(i)
			a[key] = value
			b[key] = value
		}
		So(EqualInt32Int64Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualInt32Int64Map(a, b), ShouldBeFalse)
	})

	Convey("EqualInt32Int8Map", t, func() {
		So(EqualInt32Int8Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[int32]int8), make(map[int32]int8)
		So(EqualInt32Int8Map(a, nil), ShouldBeFalse)
		So(EqualInt32Int8Map(nil, a), ShouldBeFalse)
		So(EqualInt32Int8Map(a, b), ShouldBeTrue)

		var key int32
		var value int8
		for i := 0; i < 100; i++ {
			key = int32(i)
			value = int8(i)
			a[key] = value
			b[key] = value
		}
		So(EqualInt32Int8Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualInt32Int8Map(a, b), ShouldBeFalse)
	})

	Convey("EqualInt32StringMap", t, func() {
		So(EqualInt32StringMap(nil, nil), ShouldBeTrue)
		var a, b = make(map[int32]string), make(map[int32]string)
		So(EqualInt32StringMap(a, nil), ShouldBeFalse)
		So(EqualInt32StringMap(nil, a), ShouldBeFalse)
		So(EqualInt32StringMap(a, b), ShouldBeTrue)

		var key int32
		var value string
		for i := 0; i < 100; i++ {
			key = int32(i)
			value = strconv.FormatInt(int64(i), 10)
			a[key] = value
			b[key] = value
		}
		So(EqualInt32StringMap(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualInt32StringMap(a, b), ShouldBeFalse)
	})

	Convey("EqualInt32UintMap", t, func() {
		So(EqualInt32UintMap(nil, nil), ShouldBeTrue)
		var a, b = make(map[int32]uint), make(map[int32]uint)
		So(EqualInt32UintMap(a, nil), ShouldBeFalse)
		So(EqualInt32UintMap(nil, a), ShouldBeFalse)
		So(EqualInt32UintMap(a, b), ShouldBeTrue)

		var key int32
		var value uint
		for i := 0; i < 100; i++ {
			key = int32(i)
			value = uint(i)
			a[key] = value
			b[key] = value
		}
		So(EqualInt32UintMap(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualInt32UintMap(a, b), ShouldBeFalse)
	})

	Convey("EqualInt32Uint16Map", t, func() {
		So(EqualInt32Uint16Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[int32]uint16), make(map[int32]uint16)
		So(EqualInt32Uint16Map(a, nil), ShouldBeFalse)
		So(EqualInt32Uint16Map(nil, a), ShouldBeFalse)
		So(EqualInt32Uint16Map(a, b), ShouldBeTrue)

		var key int32
		var value uint16
		for i := 0; i < 100; i++ {
			key = int32(i)
			value = uint16(i)
			a[key] = value
			b[key] = value
		}
		So(EqualInt32Uint16Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualInt32Uint16Map(a, b), ShouldBeFalse)
	})

	Convey("EqualInt32Uint32Map", t, func() {
		So(EqualInt32Uint32Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[int32]uint32), make(map[int32]uint32)
		So(EqualInt32Uint32Map(a, nil), ShouldBeFalse)
		So(EqualInt32Uint32Map(nil, a), ShouldBeFalse)
		So(EqualInt32Uint32Map(a, b), ShouldBeTrue)

		var key int32
		var value uint32
		for i := 0; i < 100; i++ {
			key = int32(i)
			value = uint32(i)
			a[key] = value
			b[key] = value
		}
		So(EqualInt32Uint32Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualInt32Uint32Map(a, b), ShouldBeFalse)
	})

	Convey("EqualInt32Uint64Map", t, func() {
		So(EqualInt32Uint64Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[int32]uint64), make(map[int32]uint64)
		So(EqualInt32Uint64Map(a, nil), ShouldBeFalse)
		So(EqualInt32Uint64Map(nil, a), ShouldBeFalse)
		So(EqualInt32Uint64Map(a, b), ShouldBeTrue)

		var key int32
		var value uint64
		for i := 0; i < 100; i++ {
			key = int32(i)
			value = uint64(i)
			a[key] = value
			b[key] = value
		}
		So(EqualInt32Uint64Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualInt32Uint64Map(a, b), ShouldBeFalse)
	})

	Convey("EqualInt32Uint8Map", t, func() {
		So(EqualInt32Uint8Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[int32]uint8), make(map[int32]uint8)
		So(EqualInt32Uint8Map(a, nil), ShouldBeFalse)
		So(EqualInt32Uint8Map(nil, a), ShouldBeFalse)
		So(EqualInt32Uint8Map(a, b), ShouldBeTrue)

		var key int32
		var value uint8
		for i := 0; i < 100; i++ {
			key = int32(i)
			value = uint8(i)
			a[key] = value
			b[key] = value
		}
		So(EqualInt32Uint8Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualInt32Uint8Map(a, b), ShouldBeFalse)
	})

	Convey("EqualInt64Float32Map", t, func() {
		So(EqualInt64Float32Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[int64]float32), make(map[int64]float32)
		So(EqualInt64Float32Map(a, nil), ShouldBeFalse)
		So(EqualInt64Float32Map(nil, a), ShouldBeFalse)
		So(EqualInt64Float32Map(a, b), ShouldBeTrue)

		var key int64
		var value float32
		for i := 0; i < 100; i++ {
			key = int64(i)
			value = float32(i)
			a[key] = value
			b[key] = value
		}
		So(EqualInt64Float32Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualInt64Float32Map(a, b), ShouldBeFalse)
	})

	Convey("EqualInt64Float64Map", t, func() {
		So(EqualInt64Float64Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[int64]float64), make(map[int64]float64)
		So(EqualInt64Float64Map(a, nil), ShouldBeFalse)
		So(EqualInt64Float64Map(nil, a), ShouldBeFalse)
		So(EqualInt64Float64Map(a, b), ShouldBeTrue)

		var key int64
		var value float64
		for i := 0; i < 100; i++ {
			key = int64(i)
			value = float64(i)
			a[key] = value
			b[key] = value
		}
		So(EqualInt64Float64Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualInt64Float64Map(a, b), ShouldBeFalse)
	})

	Convey("EqualInt64IntMap", t, func() {
		So(EqualInt64IntMap(nil, nil), ShouldBeTrue)
		var a, b = make(map[int64]int), make(map[int64]int)
		So(EqualInt64IntMap(a, nil), ShouldBeFalse)
		So(EqualInt64IntMap(nil, a), ShouldBeFalse)
		So(EqualInt64IntMap(a, b), ShouldBeTrue)

		var key int64
		var value int
		for i := 0; i < 100; i++ {
			key = int64(i)
			value = i
			a[key] = value
			b[key] = value
		}
		So(EqualInt64IntMap(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualInt64IntMap(a, b), ShouldBeFalse)
	})

	Convey("EqualInt64Int16Map", t, func() {
		So(EqualInt64Int16Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[int64]int16), make(map[int64]int16)
		So(EqualInt64Int16Map(a, nil), ShouldBeFalse)
		So(EqualInt64Int16Map(nil, a), ShouldBeFalse)
		So(EqualInt64Int16Map(a, b), ShouldBeTrue)

		var key int64
		var value int16
		for i := 0; i < 100; i++ {
			key = int64(i)
			value = int16(i)
			a[key] = value
			b[key] = value
		}
		So(EqualInt64Int16Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualInt64Int16Map(a, b), ShouldBeFalse)
	})

	Convey("EqualInt64Int32Map", t, func() {
		So(EqualInt64Int32Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[int64]int32), make(map[int64]int32)
		So(EqualInt64Int32Map(a, nil), ShouldBeFalse)
		So(EqualInt64Int32Map(nil, a), ShouldBeFalse)
		So(EqualInt64Int32Map(a, b), ShouldBeTrue)

		var key int64
		var value int32
		for i := 0; i < 100; i++ {
			key = int64(i)
			value = int32(i)
			a[key] = value
			b[key] = value
		}
		So(EqualInt64Int32Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualInt64Int32Map(a, b), ShouldBeFalse)
	})

	Convey("EqualInt64Int64Map", t, func() {
		So(EqualInt64Int64Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[int64]int64), make(map[int64]int64)
		So(EqualInt64Int64Map(a, nil), ShouldBeFalse)
		So(EqualInt64Int64Map(nil, a), ShouldBeFalse)
		So(EqualInt64Int64Map(a, b), ShouldBeTrue)

		var key int64
		var value int64
		for i := 0; i < 100; i++ {
			key = int64(i)
			value = int64(i)
			a[key] = value
			b[key] = value
		}
		So(EqualInt64Int64Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualInt64Int64Map(a, b), ShouldBeFalse)
	})

	Convey("EqualInt64Int8Map", t, func() {
		So(EqualInt64Int8Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[int64]int8), make(map[int64]int8)
		So(EqualInt64Int8Map(a, nil), ShouldBeFalse)
		So(EqualInt64Int8Map(nil, a), ShouldBeFalse)
		So(EqualInt64Int8Map(a, b), ShouldBeTrue)

		var key int64
		var value int8
		for i := 0; i < 100; i++ {
			key = int64(i)
			value = int8(i)
			a[key] = value
			b[key] = value
		}
		So(EqualInt64Int8Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualInt64Int8Map(a, b), ShouldBeFalse)
	})

	Convey("EqualInt64StringMap", t, func() {
		So(EqualInt64StringMap(nil, nil), ShouldBeTrue)
		var a, b = make(map[int64]string), make(map[int64]string)
		So(EqualInt64StringMap(a, nil), ShouldBeFalse)
		So(EqualInt64StringMap(nil, a), ShouldBeFalse)
		So(EqualInt64StringMap(a, b), ShouldBeTrue)

		var key int64
		var value string
		for i := 0; i < 100; i++ {
			key = int64(i)
			value = strconv.FormatInt(int64(i), 10)
			a[key] = value
			b[key] = value
		}
		So(EqualInt64StringMap(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualInt64StringMap(a, b), ShouldBeFalse)
	})

	Convey("EqualInt64UintMap", t, func() {
		So(EqualInt64UintMap(nil, nil), ShouldBeTrue)
		var a, b = make(map[int64]uint), make(map[int64]uint)
		So(EqualInt64UintMap(a, nil), ShouldBeFalse)
		So(EqualInt64UintMap(nil, a), ShouldBeFalse)
		So(EqualInt64UintMap(a, b), ShouldBeTrue)

		var key int64
		var value uint
		for i := 0; i < 100; i++ {
			key = int64(i)
			value = uint(i)
			a[key] = value
			b[key] = value
		}
		So(EqualInt64UintMap(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualInt64UintMap(a, b), ShouldBeFalse)
	})

	Convey("EqualInt64Uint16Map", t, func() {
		So(EqualInt64Uint16Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[int64]uint16), make(map[int64]uint16)
		So(EqualInt64Uint16Map(a, nil), ShouldBeFalse)
		So(EqualInt64Uint16Map(nil, a), ShouldBeFalse)
		So(EqualInt64Uint16Map(a, b), ShouldBeTrue)

		var key int64
		var value uint16
		for i := 0; i < 100; i++ {
			key = int64(i)
			value = uint16(i)
			a[key] = value
			b[key] = value
		}
		So(EqualInt64Uint16Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualInt64Uint16Map(a, b), ShouldBeFalse)
	})

	Convey("EqualInt64Uint32Map", t, func() {
		So(EqualInt64Uint32Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[int64]uint32), make(map[int64]uint32)
		So(EqualInt64Uint32Map(a, nil), ShouldBeFalse)
		So(EqualInt64Uint32Map(nil, a), ShouldBeFalse)
		So(EqualInt64Uint32Map(a, b), ShouldBeTrue)

		var key int64
		var value uint32
		for i := 0; i < 100; i++ {
			key = int64(i)
			value = uint32(i)
			a[key] = value
			b[key] = value
		}
		So(EqualInt64Uint32Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualInt64Uint32Map(a, b), ShouldBeFalse)
	})

	Convey("EqualInt64Uint64Map", t, func() {
		So(EqualInt64Uint64Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[int64]uint64), make(map[int64]uint64)
		So(EqualInt64Uint64Map(a, nil), ShouldBeFalse)
		So(EqualInt64Uint64Map(nil, a), ShouldBeFalse)
		So(EqualInt64Uint64Map(a, b), ShouldBeTrue)

		var key int64
		var value uint64
		for i := 0; i < 100; i++ {
			key = int64(i)
			value = uint64(i)
			a[key] = value
			b[key] = value
		}
		So(EqualInt64Uint64Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualInt64Uint64Map(a, b), ShouldBeFalse)
	})

	Convey("EqualInt64Uint8Map", t, func() {
		So(EqualInt64Uint8Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[int64]uint8), make(map[int64]uint8)
		So(EqualInt64Uint8Map(a, nil), ShouldBeFalse)
		So(EqualInt64Uint8Map(nil, a), ShouldBeFalse)
		So(EqualInt64Uint8Map(a, b), ShouldBeTrue)

		var key int64
		var value uint8
		for i := 0; i < 100; i++ {
			key = int64(i)
			value = uint8(i)
			a[key] = value
			b[key] = value
		}
		So(EqualInt64Uint8Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualInt64Uint8Map(a, b), ShouldBeFalse)
	})

	Convey("EqualInt8Float32Map", t, func() {
		So(EqualInt8Float32Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[int8]float32), make(map[int8]float32)
		So(EqualInt8Float32Map(a, nil), ShouldBeFalse)
		So(EqualInt8Float32Map(nil, a), ShouldBeFalse)
		So(EqualInt8Float32Map(a, b), ShouldBeTrue)

		var key int8
		var value float32
		for i := 0; i < 100; i++ {
			key = int8(i)
			value = float32(i)
			a[key] = value
			b[key] = value
		}
		So(EqualInt8Float32Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualInt8Float32Map(a, b), ShouldBeFalse)
	})

	Convey("EqualInt8Float64Map", t, func() {
		So(EqualInt8Float64Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[int8]float64), make(map[int8]float64)
		So(EqualInt8Float64Map(a, nil), ShouldBeFalse)
		So(EqualInt8Float64Map(nil, a), ShouldBeFalse)
		So(EqualInt8Float64Map(a, b), ShouldBeTrue)

		var key int8
		var value float64
		for i := 0; i < 100; i++ {
			key = int8(i)
			value = float64(i)
			a[key] = value
			b[key] = value
		}
		So(EqualInt8Float64Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualInt8Float64Map(a, b), ShouldBeFalse)
	})

	Convey("EqualInt8IntMap", t, func() {
		So(EqualInt8IntMap(nil, nil), ShouldBeTrue)
		var a, b = make(map[int8]int), make(map[int8]int)
		So(EqualInt8IntMap(a, nil), ShouldBeFalse)
		So(EqualInt8IntMap(nil, a), ShouldBeFalse)
		So(EqualInt8IntMap(a, b), ShouldBeTrue)

		var key int8
		var value int
		for i := 0; i < 100; i++ {
			key = int8(i)
			value = i
			a[key] = value
			b[key] = value
		}
		So(EqualInt8IntMap(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualInt8IntMap(a, b), ShouldBeFalse)
	})

	Convey("EqualInt8Int16Map", t, func() {
		So(EqualInt8Int16Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[int8]int16), make(map[int8]int16)
		So(EqualInt8Int16Map(a, nil), ShouldBeFalse)
		So(EqualInt8Int16Map(nil, a), ShouldBeFalse)
		So(EqualInt8Int16Map(a, b), ShouldBeTrue)

		var key int8
		var value int16
		for i := 0; i < 100; i++ {
			key = int8(i)
			value = int16(i)
			a[key] = value
			b[key] = value
		}
		So(EqualInt8Int16Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualInt8Int16Map(a, b), ShouldBeFalse)
	})

	Convey("EqualInt8Int32Map", t, func() {
		So(EqualInt8Int32Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[int8]int32), make(map[int8]int32)
		So(EqualInt8Int32Map(a, nil), ShouldBeFalse)
		So(EqualInt8Int32Map(nil, a), ShouldBeFalse)
		So(EqualInt8Int32Map(a, b), ShouldBeTrue)

		var key int8
		var value int32
		for i := 0; i < 100; i++ {
			key = int8(i)
			value = int32(i)
			a[key] = value
			b[key] = value
		}
		So(EqualInt8Int32Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualInt8Int32Map(a, b), ShouldBeFalse)
	})

	Convey("EqualInt8Int64Map", t, func() {
		So(EqualInt8Int64Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[int8]int64), make(map[int8]int64)
		So(EqualInt8Int64Map(a, nil), ShouldBeFalse)
		So(EqualInt8Int64Map(nil, a), ShouldBeFalse)
		So(EqualInt8Int64Map(a, b), ShouldBeTrue)

		var key int8
		var value int64
		for i := 0; i < 100; i++ {
			key = int8(i)
			value = int64(i)
			a[key] = value
			b[key] = value
		}
		So(EqualInt8Int64Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualInt8Int64Map(a, b), ShouldBeFalse)
	})

	Convey("EqualInt8Int8Map", t, func() {
		So(EqualInt8Int8Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[int8]int8), make(map[int8]int8)
		So(EqualInt8Int8Map(a, nil), ShouldBeFalse)
		So(EqualInt8Int8Map(nil, a), ShouldBeFalse)
		So(EqualInt8Int8Map(a, b), ShouldBeTrue)

		var key int8
		var value int8
		for i := 0; i < 100; i++ {
			key = int8(i)
			value = int8(i)
			a[key] = value
			b[key] = value
		}
		So(EqualInt8Int8Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualInt8Int8Map(a, b), ShouldBeFalse)
	})

	Convey("EqualInt8StringMap", t, func() {
		So(EqualInt8StringMap(nil, nil), ShouldBeTrue)
		var a, b = make(map[int8]string), make(map[int8]string)
		So(EqualInt8StringMap(a, nil), ShouldBeFalse)
		So(EqualInt8StringMap(nil, a), ShouldBeFalse)
		So(EqualInt8StringMap(a, b), ShouldBeTrue)

		var key int8
		var value string
		for i := 0; i < 100; i++ {
			key = int8(i)
			value = strconv.FormatInt(int64(i), 10)
			a[key] = value
			b[key] = value
		}
		So(EqualInt8StringMap(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualInt8StringMap(a, b), ShouldBeFalse)
	})

	Convey("EqualInt8UintMap", t, func() {
		So(EqualInt8UintMap(nil, nil), ShouldBeTrue)
		var a, b = make(map[int8]uint), make(map[int8]uint)
		So(EqualInt8UintMap(a, nil), ShouldBeFalse)
		So(EqualInt8UintMap(nil, a), ShouldBeFalse)
		So(EqualInt8UintMap(a, b), ShouldBeTrue)

		var key int8
		var value uint
		for i := 0; i < 100; i++ {
			key = int8(i)
			value = uint(i)
			a[key] = value
			b[key] = value
		}
		So(EqualInt8UintMap(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualInt8UintMap(a, b), ShouldBeFalse)
	})

	Convey("EqualInt8Uint16Map", t, func() {
		So(EqualInt8Uint16Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[int8]uint16), make(map[int8]uint16)
		So(EqualInt8Uint16Map(a, nil), ShouldBeFalse)
		So(EqualInt8Uint16Map(nil, a), ShouldBeFalse)
		So(EqualInt8Uint16Map(a, b), ShouldBeTrue)

		var key int8
		var value uint16
		for i := 0; i < 100; i++ {
			key = int8(i)
			value = uint16(i)
			a[key] = value
			b[key] = value
		}
		So(EqualInt8Uint16Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualInt8Uint16Map(a, b), ShouldBeFalse)
	})

	Convey("EqualInt8Uint32Map", t, func() {
		So(EqualInt8Uint32Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[int8]uint32), make(map[int8]uint32)
		So(EqualInt8Uint32Map(a, nil), ShouldBeFalse)
		So(EqualInt8Uint32Map(nil, a), ShouldBeFalse)
		So(EqualInt8Uint32Map(a, b), ShouldBeTrue)

		var key int8
		var value uint32
		for i := 0; i < 100; i++ {
			key = int8(i)
			value = uint32(i)
			a[key] = value
			b[key] = value
		}
		So(EqualInt8Uint32Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualInt8Uint32Map(a, b), ShouldBeFalse)
	})

	Convey("EqualInt8Uint64Map", t, func() {
		So(EqualInt8Uint64Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[int8]uint64), make(map[int8]uint64)
		So(EqualInt8Uint64Map(a, nil), ShouldBeFalse)
		So(EqualInt8Uint64Map(nil, a), ShouldBeFalse)
		So(EqualInt8Uint64Map(a, b), ShouldBeTrue)

		var key int8
		var value uint64
		for i := 0; i < 100; i++ {
			key = int8(i)
			value = uint64(i)
			a[key] = value
			b[key] = value
		}
		So(EqualInt8Uint64Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualInt8Uint64Map(a, b), ShouldBeFalse)
	})

	Convey("EqualInt8Uint8Map", t, func() {
		So(EqualInt8Uint8Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[int8]uint8), make(map[int8]uint8)
		So(EqualInt8Uint8Map(a, nil), ShouldBeFalse)
		So(EqualInt8Uint8Map(nil, a), ShouldBeFalse)
		So(EqualInt8Uint8Map(a, b), ShouldBeTrue)

		var key int8
		var value uint8
		for i := 0; i < 100; i++ {
			key = int8(i)
			value = uint8(i)
			a[key] = value
			b[key] = value
		}
		So(EqualInt8Uint8Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualInt8Uint8Map(a, b), ShouldBeFalse)
	})

	Convey("EqualStringFloat32Map", t, func() {
		So(EqualStringFloat32Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[string]float32), make(map[string]float32)
		So(EqualStringFloat32Map(a, nil), ShouldBeFalse)
		So(EqualStringFloat32Map(nil, a), ShouldBeFalse)
		So(EqualStringFloat32Map(a, b), ShouldBeTrue)

		var key string
		var value float32
		for i := 0; i < 100; i++ {
			key = strconv.FormatInt(int64(i), 10)
			value = float32(i)
			a[key] = value
			b[key] = value
		}
		So(EqualStringFloat32Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualStringFloat32Map(a, b), ShouldBeFalse)
	})

	Convey("EqualStringFloat64Map", t, func() {
		So(EqualStringFloat64Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[string]float64), make(map[string]float64)
		So(EqualStringFloat64Map(a, nil), ShouldBeFalse)
		So(EqualStringFloat64Map(nil, a), ShouldBeFalse)
		So(EqualStringFloat64Map(a, b), ShouldBeTrue)

		var key string
		var value float64
		for i := 0; i < 100; i++ {
			key = strconv.FormatInt(int64(i), 10)
			value = float64(i)
			a[key] = value
			b[key] = value
		}
		So(EqualStringFloat64Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualStringFloat64Map(a, b), ShouldBeFalse)
	})

	Convey("EqualStringIntMap", t, func() {
		So(EqualStringIntMap(nil, nil), ShouldBeTrue)
		var a, b = make(map[string]int), make(map[string]int)
		So(EqualStringIntMap(a, nil), ShouldBeFalse)
		So(EqualStringIntMap(nil, a), ShouldBeFalse)
		So(EqualStringIntMap(a, b), ShouldBeTrue)

		var key string
		var value int
		for i := 0; i < 100; i++ {
			key = strconv.FormatInt(int64(i), 10)
			value = i
			a[key] = value
			b[key] = value
		}
		So(EqualStringIntMap(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualStringIntMap(a, b), ShouldBeFalse)
	})

	Convey("EqualStringInt16Map", t, func() {
		So(EqualStringInt16Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[string]int16), make(map[string]int16)
		So(EqualStringInt16Map(a, nil), ShouldBeFalse)
		So(EqualStringInt16Map(nil, a), ShouldBeFalse)
		So(EqualStringInt16Map(a, b), ShouldBeTrue)

		var key string
		var value int16
		for i := 0; i < 100; i++ {
			key = strconv.FormatInt(int64(i), 10)
			value = int16(i)
			a[key] = value
			b[key] = value
		}
		So(EqualStringInt16Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualStringInt16Map(a, b), ShouldBeFalse)
	})

	Convey("EqualStringInt32Map", t, func() {
		So(EqualStringInt32Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[string]int32), make(map[string]int32)
		So(EqualStringInt32Map(a, nil), ShouldBeFalse)
		So(EqualStringInt32Map(nil, a), ShouldBeFalse)
		So(EqualStringInt32Map(a, b), ShouldBeTrue)

		var key string
		var value int32
		for i := 0; i < 100; i++ {
			key = strconv.FormatInt(int64(i), 10)
			value = int32(i)
			a[key] = value
			b[key] = value
		}
		So(EqualStringInt32Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualStringInt32Map(a, b), ShouldBeFalse)
	})

	Convey("EqualStringInt64Map", t, func() {
		So(EqualStringInt64Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[string]int64), make(map[string]int64)
		So(EqualStringInt64Map(a, nil), ShouldBeFalse)
		So(EqualStringInt64Map(nil, a), ShouldBeFalse)
		So(EqualStringInt64Map(a, b), ShouldBeTrue)

		var key string
		var value int64
		for i := 0; i < 100; i++ {
			key = strconv.FormatInt(int64(i), 10)
			value = int64(i)
			a[key] = value
			b[key] = value
		}
		So(EqualStringInt64Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualStringInt64Map(a, b), ShouldBeFalse)
	})

	Convey("EqualStringInt8Map", t, func() {
		So(EqualStringInt8Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[string]int8), make(map[string]int8)
		So(EqualStringInt8Map(a, nil), ShouldBeFalse)
		So(EqualStringInt8Map(nil, a), ShouldBeFalse)
		So(EqualStringInt8Map(a, b), ShouldBeTrue)

		var key string
		var value int8
		for i := 0; i < 100; i++ {
			key = strconv.FormatInt(int64(i), 10)
			value = int8(i)
			a[key] = value
			b[key] = value
		}
		So(EqualStringInt8Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualStringInt8Map(a, b), ShouldBeFalse)
	})

	Convey("EqualStringStringMap", t, func() {
		So(EqualStringStringMap(nil, nil), ShouldBeTrue)
		var a, b = make(map[string]string), make(map[string]string)
		So(EqualStringStringMap(a, nil), ShouldBeFalse)
		So(EqualStringStringMap(nil, a), ShouldBeFalse)
		So(EqualStringStringMap(a, b), ShouldBeTrue)

		var key string
		var value string
		for i := 0; i < 100; i++ {
			key = strconv.FormatInt(int64(i), 10)
			value = strconv.FormatInt(int64(i), 10)
			a[key] = value
			b[key] = value
		}
		So(EqualStringStringMap(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualStringStringMap(a, b), ShouldBeFalse)
	})

	Convey("EqualStringUintMap", t, func() {
		So(EqualStringUintMap(nil, nil), ShouldBeTrue)
		var a, b = make(map[string]uint), make(map[string]uint)
		So(EqualStringUintMap(a, nil), ShouldBeFalse)
		So(EqualStringUintMap(nil, a), ShouldBeFalse)
		So(EqualStringUintMap(a, b), ShouldBeTrue)

		var key string
		var value uint
		for i := 0; i < 100; i++ {
			key = strconv.FormatInt(int64(i), 10)
			value = uint(i)
			a[key] = value
			b[key] = value
		}
		So(EqualStringUintMap(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualStringUintMap(a, b), ShouldBeFalse)
	})

	Convey("EqualStringUint16Map", t, func() {
		So(EqualStringUint16Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[string]uint16), make(map[string]uint16)
		So(EqualStringUint16Map(a, nil), ShouldBeFalse)
		So(EqualStringUint16Map(nil, a), ShouldBeFalse)
		So(EqualStringUint16Map(a, b), ShouldBeTrue)

		var key string
		var value uint16
		for i := 0; i < 100; i++ {
			key = strconv.FormatInt(int64(i), 10)
			value = uint16(i)
			a[key] = value
			b[key] = value
		}
		So(EqualStringUint16Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualStringUint16Map(a, b), ShouldBeFalse)
	})

	Convey("EqualStringUint32Map", t, func() {
		So(EqualStringUint32Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[string]uint32), make(map[string]uint32)
		So(EqualStringUint32Map(a, nil), ShouldBeFalse)
		So(EqualStringUint32Map(nil, a), ShouldBeFalse)
		So(EqualStringUint32Map(a, b), ShouldBeTrue)

		var key string
		var value uint32
		for i := 0; i < 100; i++ {
			key = strconv.FormatInt(int64(i), 10)
			value = uint32(i)
			a[key] = value
			b[key] = value
		}
		So(EqualStringUint32Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualStringUint32Map(a, b), ShouldBeFalse)
	})

	Convey("EqualStringUint64Map", t, func() {
		So(EqualStringUint64Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[string]uint64), make(map[string]uint64)
		So(EqualStringUint64Map(a, nil), ShouldBeFalse)
		So(EqualStringUint64Map(nil, a), ShouldBeFalse)
		So(EqualStringUint64Map(a, b), ShouldBeTrue)

		var key string
		var value uint64
		for i := 0; i < 100; i++ {
			key = strconv.FormatInt(int64(i), 10)
			value = uint64(i)
			a[key] = value
			b[key] = value
		}
		So(EqualStringUint64Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualStringUint64Map(a, b), ShouldBeFalse)
	})

	Convey("EqualStringUint8Map", t, func() {
		So(EqualStringUint8Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[string]uint8), make(map[string]uint8)
		So(EqualStringUint8Map(a, nil), ShouldBeFalse)
		So(EqualStringUint8Map(nil, a), ShouldBeFalse)
		So(EqualStringUint8Map(a, b), ShouldBeTrue)

		var key string
		var value uint8
		for i := 0; i < 100; i++ {
			key = strconv.FormatInt(int64(i), 10)
			value = uint8(i)
			a[key] = value
			b[key] = value
		}
		So(EqualStringUint8Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualStringUint8Map(a, b), ShouldBeFalse)
	})

	Convey("EqualUintFloat32Map", t, func() {
		So(EqualUintFloat32Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[uint]float32), make(map[uint]float32)
		So(EqualUintFloat32Map(a, nil), ShouldBeFalse)
		So(EqualUintFloat32Map(nil, a), ShouldBeFalse)
		So(EqualUintFloat32Map(a, b), ShouldBeTrue)

		var key uint
		var value float32
		for i := 0; i < 100; i++ {
			key = uint(i)
			value = float32(i)
			a[key] = value
			b[key] = value
		}
		So(EqualUintFloat32Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualUintFloat32Map(a, b), ShouldBeFalse)
	})

	Convey("EqualUintFloat64Map", t, func() {
		So(EqualUintFloat64Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[uint]float64), make(map[uint]float64)
		So(EqualUintFloat64Map(a, nil), ShouldBeFalse)
		So(EqualUintFloat64Map(nil, a), ShouldBeFalse)
		So(EqualUintFloat64Map(a, b), ShouldBeTrue)

		var key uint
		var value float64
		for i := 0; i < 100; i++ {
			key = uint(i)
			value = float64(i)
			a[key] = value
			b[key] = value
		}
		So(EqualUintFloat64Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualUintFloat64Map(a, b), ShouldBeFalse)
	})

	Convey("EqualUintIntMap", t, func() {
		So(EqualUintIntMap(nil, nil), ShouldBeTrue)
		var a, b = make(map[uint]int), make(map[uint]int)
		So(EqualUintIntMap(a, nil), ShouldBeFalse)
		So(EqualUintIntMap(nil, a), ShouldBeFalse)
		So(EqualUintIntMap(a, b), ShouldBeTrue)

		var key uint
		var value int
		for i := 0; i < 100; i++ {
			key = uint(i)
			value = i
			a[key] = value
			b[key] = value
		}
		So(EqualUintIntMap(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualUintIntMap(a, b), ShouldBeFalse)
	})

	Convey("EqualUintInt16Map", t, func() {
		So(EqualUintInt16Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[uint]int16), make(map[uint]int16)
		So(EqualUintInt16Map(a, nil), ShouldBeFalse)
		So(EqualUintInt16Map(nil, a), ShouldBeFalse)
		So(EqualUintInt16Map(a, b), ShouldBeTrue)

		var key uint
		var value int16
		for i := 0; i < 100; i++ {
			key = uint(i)
			value = int16(i)
			a[key] = value
			b[key] = value
		}
		So(EqualUintInt16Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualUintInt16Map(a, b), ShouldBeFalse)
	})

	Convey("EqualUintInt32Map", t, func() {
		So(EqualUintInt32Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[uint]int32), make(map[uint]int32)
		So(EqualUintInt32Map(a, nil), ShouldBeFalse)
		So(EqualUintInt32Map(nil, a), ShouldBeFalse)
		So(EqualUintInt32Map(a, b), ShouldBeTrue)

		var key uint
		var value int32
		for i := 0; i < 100; i++ {
			key = uint(i)
			value = int32(i)
			a[key] = value
			b[key] = value
		}
		So(EqualUintInt32Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualUintInt32Map(a, b), ShouldBeFalse)
	})

	Convey("EqualUintInt64Map", t, func() {
		So(EqualUintInt64Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[uint]int64), make(map[uint]int64)
		So(EqualUintInt64Map(a, nil), ShouldBeFalse)
		So(EqualUintInt64Map(nil, a), ShouldBeFalse)
		So(EqualUintInt64Map(a, b), ShouldBeTrue)

		var key uint
		var value int64
		for i := 0; i < 100; i++ {
			key = uint(i)
			value = int64(i)
			a[key] = value
			b[key] = value
		}
		So(EqualUintInt64Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualUintInt64Map(a, b), ShouldBeFalse)
	})

	Convey("EqualUintInt8Map", t, func() {
		So(EqualUintInt8Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[uint]int8), make(map[uint]int8)
		So(EqualUintInt8Map(a, nil), ShouldBeFalse)
		So(EqualUintInt8Map(nil, a), ShouldBeFalse)
		So(EqualUintInt8Map(a, b), ShouldBeTrue)

		var key uint
		var value int8
		for i := 0; i < 100; i++ {
			key = uint(i)
			value = int8(i)
			a[key] = value
			b[key] = value
		}
		So(EqualUintInt8Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualUintInt8Map(a, b), ShouldBeFalse)
	})

	Convey("EqualUintStringMap", t, func() {
		So(EqualUintStringMap(nil, nil), ShouldBeTrue)
		var a, b = make(map[uint]string), make(map[uint]string)
		So(EqualUintStringMap(a, nil), ShouldBeFalse)
		So(EqualUintStringMap(nil, a), ShouldBeFalse)
		So(EqualUintStringMap(a, b), ShouldBeTrue)

		var key uint
		var value string
		for i := 0; i < 100; i++ {
			key = uint(i)
			value = strconv.FormatInt(int64(i), 10)
			a[key] = value
			b[key] = value
		}
		So(EqualUintStringMap(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualUintStringMap(a, b), ShouldBeFalse)
	})

	Convey("EqualUintUintMap", t, func() {
		So(EqualUintUintMap(nil, nil), ShouldBeTrue)
		var a, b = make(map[uint]uint), make(map[uint]uint)
		So(EqualUintUintMap(a, nil), ShouldBeFalse)
		So(EqualUintUintMap(nil, a), ShouldBeFalse)
		So(EqualUintUintMap(a, b), ShouldBeTrue)

		var key uint
		var value uint
		for i := 0; i < 100; i++ {
			key = uint(i)
			value = uint(i)
			a[key] = value
			b[key] = value
		}
		So(EqualUintUintMap(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualUintUintMap(a, b), ShouldBeFalse)
	})

	Convey("EqualUintUint16Map", t, func() {
		So(EqualUintUint16Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[uint]uint16), make(map[uint]uint16)
		So(EqualUintUint16Map(a, nil), ShouldBeFalse)
		So(EqualUintUint16Map(nil, a), ShouldBeFalse)
		So(EqualUintUint16Map(a, b), ShouldBeTrue)

		var key uint
		var value uint16
		for i := 0; i < 100; i++ {
			key = uint(i)
			value = uint16(i)
			a[key] = value
			b[key] = value
		}
		So(EqualUintUint16Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualUintUint16Map(a, b), ShouldBeFalse)
	})

	Convey("EqualUintUint32Map", t, func() {
		So(EqualUintUint32Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[uint]uint32), make(map[uint]uint32)
		So(EqualUintUint32Map(a, nil), ShouldBeFalse)
		So(EqualUintUint32Map(nil, a), ShouldBeFalse)
		So(EqualUintUint32Map(a, b), ShouldBeTrue)

		var key uint
		var value uint32
		for i := 0; i < 100; i++ {
			key = uint(i)
			value = uint32(i)
			a[key] = value
			b[key] = value
		}
		So(EqualUintUint32Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualUintUint32Map(a, b), ShouldBeFalse)
	})

	Convey("EqualUintUint64Map", t, func() {
		So(EqualUintUint64Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[uint]uint64), make(map[uint]uint64)
		So(EqualUintUint64Map(a, nil), ShouldBeFalse)
		So(EqualUintUint64Map(nil, a), ShouldBeFalse)
		So(EqualUintUint64Map(a, b), ShouldBeTrue)

		var key uint
		var value uint64
		for i := 0; i < 100; i++ {
			key = uint(i)
			value = uint64(i)
			a[key] = value
			b[key] = value
		}
		So(EqualUintUint64Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualUintUint64Map(a, b), ShouldBeFalse)
	})

	Convey("EqualUintUint8Map", t, func() {
		So(EqualUintUint8Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[uint]uint8), make(map[uint]uint8)
		So(EqualUintUint8Map(a, nil), ShouldBeFalse)
		So(EqualUintUint8Map(nil, a), ShouldBeFalse)
		So(EqualUintUint8Map(a, b), ShouldBeTrue)

		var key uint
		var value uint8
		for i := 0; i < 100; i++ {
			key = uint(i)
			value = uint8(i)
			a[key] = value
			b[key] = value
		}
		So(EqualUintUint8Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualUintUint8Map(a, b), ShouldBeFalse)
	})

	Convey("EqualUint16Float32Map", t, func() {
		So(EqualUint16Float32Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[uint16]float32), make(map[uint16]float32)
		So(EqualUint16Float32Map(a, nil), ShouldBeFalse)
		So(EqualUint16Float32Map(nil, a), ShouldBeFalse)
		So(EqualUint16Float32Map(a, b), ShouldBeTrue)

		var key uint16
		var value float32
		for i := 0; i < 100; i++ {
			key = uint16(i)
			value = float32(i)
			a[key] = value
			b[key] = value
		}
		So(EqualUint16Float32Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualUint16Float32Map(a, b), ShouldBeFalse)
	})

	Convey("EqualUint16Float64Map", t, func() {
		So(EqualUint16Float64Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[uint16]float64), make(map[uint16]float64)
		So(EqualUint16Float64Map(a, nil), ShouldBeFalse)
		So(EqualUint16Float64Map(nil, a), ShouldBeFalse)
		So(EqualUint16Float64Map(a, b), ShouldBeTrue)

		var key uint16
		var value float64
		for i := 0; i < 100; i++ {
			key = uint16(i)
			value = float64(i)
			a[key] = value
			b[key] = value
		}
		So(EqualUint16Float64Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualUint16Float64Map(a, b), ShouldBeFalse)
	})

	Convey("EqualUint16IntMap", t, func() {
		So(EqualUint16IntMap(nil, nil), ShouldBeTrue)
		var a, b = make(map[uint16]int), make(map[uint16]int)
		So(EqualUint16IntMap(a, nil), ShouldBeFalse)
		So(EqualUint16IntMap(nil, a), ShouldBeFalse)
		So(EqualUint16IntMap(a, b), ShouldBeTrue)

		var key uint16
		var value int
		for i := 0; i < 100; i++ {
			key = uint16(i)
			value = i
			a[key] = value
			b[key] = value
		}
		So(EqualUint16IntMap(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualUint16IntMap(a, b), ShouldBeFalse)
	})

	Convey("EqualUint16Int16Map", t, func() {
		So(EqualUint16Int16Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[uint16]int16), make(map[uint16]int16)
		So(EqualUint16Int16Map(a, nil), ShouldBeFalse)
		So(EqualUint16Int16Map(nil, a), ShouldBeFalse)
		So(EqualUint16Int16Map(a, b), ShouldBeTrue)

		var key uint16
		var value int16
		for i := 0; i < 100; i++ {
			key = uint16(i)
			value = int16(i)
			a[key] = value
			b[key] = value
		}
		So(EqualUint16Int16Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualUint16Int16Map(a, b), ShouldBeFalse)
	})

	Convey("EqualUint16Int32Map", t, func() {
		So(EqualUint16Int32Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[uint16]int32), make(map[uint16]int32)
		So(EqualUint16Int32Map(a, nil), ShouldBeFalse)
		So(EqualUint16Int32Map(nil, a), ShouldBeFalse)
		So(EqualUint16Int32Map(a, b), ShouldBeTrue)

		var key uint16
		var value int32
		for i := 0; i < 100; i++ {
			key = uint16(i)
			value = int32(i)
			a[key] = value
			b[key] = value
		}
		So(EqualUint16Int32Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualUint16Int32Map(a, b), ShouldBeFalse)
	})

	Convey("EqualUint16Int64Map", t, func() {
		So(EqualUint16Int64Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[uint16]int64), make(map[uint16]int64)
		So(EqualUint16Int64Map(a, nil), ShouldBeFalse)
		So(EqualUint16Int64Map(nil, a), ShouldBeFalse)
		So(EqualUint16Int64Map(a, b), ShouldBeTrue)

		var key uint16
		var value int64
		for i := 0; i < 100; i++ {
			key = uint16(i)
			value = int64(i)
			a[key] = value
			b[key] = value
		}
		So(EqualUint16Int64Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualUint16Int64Map(a, b), ShouldBeFalse)
	})

	Convey("EqualUint16Int8Map", t, func() {
		So(EqualUint16Int8Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[uint16]int8), make(map[uint16]int8)
		So(EqualUint16Int8Map(a, nil), ShouldBeFalse)
		So(EqualUint16Int8Map(nil, a), ShouldBeFalse)
		So(EqualUint16Int8Map(a, b), ShouldBeTrue)

		var key uint16
		var value int8
		for i := 0; i < 100; i++ {
			key = uint16(i)
			value = int8(i)
			a[key] = value
			b[key] = value
		}
		So(EqualUint16Int8Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualUint16Int8Map(a, b), ShouldBeFalse)
	})

	Convey("EqualUint16StringMap", t, func() {
		So(EqualUint16StringMap(nil, nil), ShouldBeTrue)
		var a, b = make(map[uint16]string), make(map[uint16]string)
		So(EqualUint16StringMap(a, nil), ShouldBeFalse)
		So(EqualUint16StringMap(nil, a), ShouldBeFalse)
		So(EqualUint16StringMap(a, b), ShouldBeTrue)

		var key uint16
		var value string
		for i := 0; i < 100; i++ {
			key = uint16(i)
			value = strconv.FormatInt(int64(i), 10)
			a[key] = value
			b[key] = value
		}
		So(EqualUint16StringMap(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualUint16StringMap(a, b), ShouldBeFalse)
	})

	Convey("EqualUint16UintMap", t, func() {
		So(EqualUint16UintMap(nil, nil), ShouldBeTrue)
		var a, b = make(map[uint16]uint), make(map[uint16]uint)
		So(EqualUint16UintMap(a, nil), ShouldBeFalse)
		So(EqualUint16UintMap(nil, a), ShouldBeFalse)
		So(EqualUint16UintMap(a, b), ShouldBeTrue)

		var key uint16
		var value uint
		for i := 0; i < 100; i++ {
			key = uint16(i)
			value = uint(i)
			a[key] = value
			b[key] = value
		}
		So(EqualUint16UintMap(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualUint16UintMap(a, b), ShouldBeFalse)
	})

	Convey("EqualUint16Uint16Map", t, func() {
		So(EqualUint16Uint16Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[uint16]uint16), make(map[uint16]uint16)
		So(EqualUint16Uint16Map(a, nil), ShouldBeFalse)
		So(EqualUint16Uint16Map(nil, a), ShouldBeFalse)
		So(EqualUint16Uint16Map(a, b), ShouldBeTrue)

		var key uint16
		var value uint16
		for i := 0; i < 100; i++ {
			key = uint16(i)
			value = uint16(i)
			a[key] = value
			b[key] = value
		}
		So(EqualUint16Uint16Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualUint16Uint16Map(a, b), ShouldBeFalse)
	})

	Convey("EqualUint16Uint32Map", t, func() {
		So(EqualUint16Uint32Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[uint16]uint32), make(map[uint16]uint32)
		So(EqualUint16Uint32Map(a, nil), ShouldBeFalse)
		So(EqualUint16Uint32Map(nil, a), ShouldBeFalse)
		So(EqualUint16Uint32Map(a, b), ShouldBeTrue)

		var key uint16
		var value uint32
		for i := 0; i < 100; i++ {
			key = uint16(i)
			value = uint32(i)
			a[key] = value
			b[key] = value
		}
		So(EqualUint16Uint32Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualUint16Uint32Map(a, b), ShouldBeFalse)
	})

	Convey("EqualUint16Uint64Map", t, func() {
		So(EqualUint16Uint64Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[uint16]uint64), make(map[uint16]uint64)
		So(EqualUint16Uint64Map(a, nil), ShouldBeFalse)
		So(EqualUint16Uint64Map(nil, a), ShouldBeFalse)
		So(EqualUint16Uint64Map(a, b), ShouldBeTrue)

		var key uint16
		var value uint64
		for i := 0; i < 100; i++ {
			key = uint16(i)
			value = uint64(i)
			a[key] = value
			b[key] = value
		}
		So(EqualUint16Uint64Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualUint16Uint64Map(a, b), ShouldBeFalse)
	})

	Convey("EqualUint16Uint8Map", t, func() {
		So(EqualUint16Uint8Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[uint16]uint8), make(map[uint16]uint8)
		So(EqualUint16Uint8Map(a, nil), ShouldBeFalse)
		So(EqualUint16Uint8Map(nil, a), ShouldBeFalse)
		So(EqualUint16Uint8Map(a, b), ShouldBeTrue)

		var key uint16
		var value uint8
		for i := 0; i < 100; i++ {
			key = uint16(i)
			value = uint8(i)
			a[key] = value
			b[key] = value
		}
		So(EqualUint16Uint8Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualUint16Uint8Map(a, b), ShouldBeFalse)
	})

	Convey("EqualUint32Float32Map", t, func() {
		So(EqualUint32Float32Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[uint32]float32), make(map[uint32]float32)
		So(EqualUint32Float32Map(a, nil), ShouldBeFalse)
		So(EqualUint32Float32Map(nil, a), ShouldBeFalse)
		So(EqualUint32Float32Map(a, b), ShouldBeTrue)

		var key uint32
		var value float32
		for i := 0; i < 100; i++ {
			key = uint32(i)
			value = float32(i)
			a[key] = value
			b[key] = value
		}
		So(EqualUint32Float32Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualUint32Float32Map(a, b), ShouldBeFalse)
	})

	Convey("EqualUint32Float64Map", t, func() {
		So(EqualUint32Float64Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[uint32]float64), make(map[uint32]float64)
		So(EqualUint32Float64Map(a, nil), ShouldBeFalse)
		So(EqualUint32Float64Map(nil, a), ShouldBeFalse)
		So(EqualUint32Float64Map(a, b), ShouldBeTrue)

		var key uint32
		var value float64
		for i := 0; i < 100; i++ {
			key = uint32(i)
			value = float64(i)
			a[key] = value
			b[key] = value
		}
		So(EqualUint32Float64Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualUint32Float64Map(a, b), ShouldBeFalse)
	})

	Convey("EqualUint32IntMap", t, func() {
		So(EqualUint32IntMap(nil, nil), ShouldBeTrue)
		var a, b = make(map[uint32]int), make(map[uint32]int)
		So(EqualUint32IntMap(a, nil), ShouldBeFalse)
		So(EqualUint32IntMap(nil, a), ShouldBeFalse)
		So(EqualUint32IntMap(a, b), ShouldBeTrue)

		var key uint32
		var value int
		for i := 0; i < 100; i++ {
			key = uint32(i)
			value = i
			a[key] = value
			b[key] = value
		}
		So(EqualUint32IntMap(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualUint32IntMap(a, b), ShouldBeFalse)
	})

	Convey("EqualUint32Int16Map", t, func() {
		So(EqualUint32Int16Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[uint32]int16), make(map[uint32]int16)
		So(EqualUint32Int16Map(a, nil), ShouldBeFalse)
		So(EqualUint32Int16Map(nil, a), ShouldBeFalse)
		So(EqualUint32Int16Map(a, b), ShouldBeTrue)

		var key uint32
		var value int16
		for i := 0; i < 100; i++ {
			key = uint32(i)
			value = int16(i)
			a[key] = value
			b[key] = value
		}
		So(EqualUint32Int16Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualUint32Int16Map(a, b), ShouldBeFalse)
	})

	Convey("EqualUint32Int32Map", t, func() {
		So(EqualUint32Int32Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[uint32]int32), make(map[uint32]int32)
		So(EqualUint32Int32Map(a, nil), ShouldBeFalse)
		So(EqualUint32Int32Map(nil, a), ShouldBeFalse)
		So(EqualUint32Int32Map(a, b), ShouldBeTrue)

		var key uint32
		var value int32
		for i := 0; i < 100; i++ {
			key = uint32(i)
			value = int32(i)
			a[key] = value
			b[key] = value
		}
		So(EqualUint32Int32Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualUint32Int32Map(a, b), ShouldBeFalse)
	})

	Convey("EqualUint32Int64Map", t, func() {
		So(EqualUint32Int64Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[uint32]int64), make(map[uint32]int64)
		So(EqualUint32Int64Map(a, nil), ShouldBeFalse)
		So(EqualUint32Int64Map(nil, a), ShouldBeFalse)
		So(EqualUint32Int64Map(a, b), ShouldBeTrue)

		var key uint32
		var value int64
		for i := 0; i < 100; i++ {
			key = uint32(i)
			value = int64(i)
			a[key] = value
			b[key] = value
		}
		So(EqualUint32Int64Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualUint32Int64Map(a, b), ShouldBeFalse)
	})

	Convey("EqualUint32Int8Map", t, func() {
		So(EqualUint32Int8Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[uint32]int8), make(map[uint32]int8)
		So(EqualUint32Int8Map(a, nil), ShouldBeFalse)
		So(EqualUint32Int8Map(nil, a), ShouldBeFalse)
		So(EqualUint32Int8Map(a, b), ShouldBeTrue)

		var key uint32
		var value int8
		for i := 0; i < 100; i++ {
			key = uint32(i)
			value = int8(i)
			a[key] = value
			b[key] = value
		}
		So(EqualUint32Int8Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualUint32Int8Map(a, b), ShouldBeFalse)
	})

	Convey("EqualUint32StringMap", t, func() {
		So(EqualUint32StringMap(nil, nil), ShouldBeTrue)
		var a, b = make(map[uint32]string), make(map[uint32]string)
		So(EqualUint32StringMap(a, nil), ShouldBeFalse)
		So(EqualUint32StringMap(nil, a), ShouldBeFalse)
		So(EqualUint32StringMap(a, b), ShouldBeTrue)

		var key uint32
		var value string
		for i := 0; i < 100; i++ {
			key = uint32(i)
			value = strconv.FormatInt(int64(i), 10)
			a[key] = value
			b[key] = value
		}
		So(EqualUint32StringMap(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualUint32StringMap(a, b), ShouldBeFalse)
	})

	Convey("EqualUint32UintMap", t, func() {
		So(EqualUint32UintMap(nil, nil), ShouldBeTrue)
		var a, b = make(map[uint32]uint), make(map[uint32]uint)
		So(EqualUint32UintMap(a, nil), ShouldBeFalse)
		So(EqualUint32UintMap(nil, a), ShouldBeFalse)
		So(EqualUint32UintMap(a, b), ShouldBeTrue)

		var key uint32
		var value uint
		for i := 0; i < 100; i++ {
			key = uint32(i)
			value = uint(i)
			a[key] = value
			b[key] = value
		}
		So(EqualUint32UintMap(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualUint32UintMap(a, b), ShouldBeFalse)
	})

	Convey("EqualUint32Uint16Map", t, func() {
		So(EqualUint32Uint16Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[uint32]uint16), make(map[uint32]uint16)
		So(EqualUint32Uint16Map(a, nil), ShouldBeFalse)
		So(EqualUint32Uint16Map(nil, a), ShouldBeFalse)
		So(EqualUint32Uint16Map(a, b), ShouldBeTrue)

		var key uint32
		var value uint16
		for i := 0; i < 100; i++ {
			key = uint32(i)
			value = uint16(i)
			a[key] = value
			b[key] = value
		}
		So(EqualUint32Uint16Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualUint32Uint16Map(a, b), ShouldBeFalse)
	})

	Convey("EqualUint32Uint32Map", t, func() {
		So(EqualUint32Uint32Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[uint32]uint32), make(map[uint32]uint32)
		So(EqualUint32Uint32Map(a, nil), ShouldBeFalse)
		So(EqualUint32Uint32Map(nil, a), ShouldBeFalse)
		So(EqualUint32Uint32Map(a, b), ShouldBeTrue)

		var key uint32
		var value uint32
		for i := 0; i < 100; i++ {
			key = uint32(i)
			value = uint32(i)
			a[key] = value
			b[key] = value
		}
		So(EqualUint32Uint32Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualUint32Uint32Map(a, b), ShouldBeFalse)
	})

	Convey("EqualUint32Uint64Map", t, func() {
		So(EqualUint32Uint64Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[uint32]uint64), make(map[uint32]uint64)
		So(EqualUint32Uint64Map(a, nil), ShouldBeFalse)
		So(EqualUint32Uint64Map(nil, a), ShouldBeFalse)
		So(EqualUint32Uint64Map(a, b), ShouldBeTrue)

		var key uint32
		var value uint64
		for i := 0; i < 100; i++ {
			key = uint32(i)
			value = uint64(i)
			a[key] = value
			b[key] = value
		}
		So(EqualUint32Uint64Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualUint32Uint64Map(a, b), ShouldBeFalse)
	})

	Convey("EqualUint32Uint8Map", t, func() {
		So(EqualUint32Uint8Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[uint32]uint8), make(map[uint32]uint8)
		So(EqualUint32Uint8Map(a, nil), ShouldBeFalse)
		So(EqualUint32Uint8Map(nil, a), ShouldBeFalse)
		So(EqualUint32Uint8Map(a, b), ShouldBeTrue)

		var key uint32
		var value uint8
		for i := 0; i < 100; i++ {
			key = uint32(i)
			value = uint8(i)
			a[key] = value
			b[key] = value
		}
		So(EqualUint32Uint8Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualUint32Uint8Map(a, b), ShouldBeFalse)
	})

	Convey("EqualUint64Float32Map", t, func() {
		So(EqualUint64Float32Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[uint64]float32), make(map[uint64]float32)
		So(EqualUint64Float32Map(a, nil), ShouldBeFalse)
		So(EqualUint64Float32Map(nil, a), ShouldBeFalse)
		So(EqualUint64Float32Map(a, b), ShouldBeTrue)

		var key uint64
		var value float32
		for i := 0; i < 100; i++ {
			key = uint64(i)
			value = float32(i)
			a[key] = value
			b[key] = value
		}
		So(EqualUint64Float32Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualUint64Float32Map(a, b), ShouldBeFalse)
	})

	Convey("EqualUint64Float64Map", t, func() {
		So(EqualUint64Float64Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[uint64]float64), make(map[uint64]float64)
		So(EqualUint64Float64Map(a, nil), ShouldBeFalse)
		So(EqualUint64Float64Map(nil, a), ShouldBeFalse)
		So(EqualUint64Float64Map(a, b), ShouldBeTrue)

		var key uint64
		var value float64
		for i := 0; i < 100; i++ {
			key = uint64(i)
			value = float64(i)
			a[key] = value
			b[key] = value
		}
		So(EqualUint64Float64Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualUint64Float64Map(a, b), ShouldBeFalse)
	})

	Convey("EqualUint64IntMap", t, func() {
		So(EqualUint64IntMap(nil, nil), ShouldBeTrue)
		var a, b = make(map[uint64]int), make(map[uint64]int)
		So(EqualUint64IntMap(a, nil), ShouldBeFalse)
		So(EqualUint64IntMap(nil, a), ShouldBeFalse)
		So(EqualUint64IntMap(a, b), ShouldBeTrue)

		var key uint64
		var value int
		for i := 0; i < 100; i++ {
			key = uint64(i)
			value = i
			a[key] = value
			b[key] = value
		}
		So(EqualUint64IntMap(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualUint64IntMap(a, b), ShouldBeFalse)
	})

	Convey("EqualUint64Int16Map", t, func() {
		So(EqualUint64Int16Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[uint64]int16), make(map[uint64]int16)
		So(EqualUint64Int16Map(a, nil), ShouldBeFalse)
		So(EqualUint64Int16Map(nil, a), ShouldBeFalse)
		So(EqualUint64Int16Map(a, b), ShouldBeTrue)

		var key uint64
		var value int16
		for i := 0; i < 100; i++ {
			key = uint64(i)
			value = int16(i)
			a[key] = value
			b[key] = value
		}
		So(EqualUint64Int16Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualUint64Int16Map(a, b), ShouldBeFalse)
	})

	Convey("EqualUint64Int32Map", t, func() {
		So(EqualUint64Int32Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[uint64]int32), make(map[uint64]int32)
		So(EqualUint64Int32Map(a, nil), ShouldBeFalse)
		So(EqualUint64Int32Map(nil, a), ShouldBeFalse)
		So(EqualUint64Int32Map(a, b), ShouldBeTrue)

		var key uint64
		var value int32
		for i := 0; i < 100; i++ {
			key = uint64(i)
			value = int32(i)
			a[key] = value
			b[key] = value
		}
		So(EqualUint64Int32Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualUint64Int32Map(a, b), ShouldBeFalse)
	})

	Convey("EqualUint64Int64Map", t, func() {
		So(EqualUint64Int64Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[uint64]int64), make(map[uint64]int64)
		So(EqualUint64Int64Map(a, nil), ShouldBeFalse)
		So(EqualUint64Int64Map(nil, a), ShouldBeFalse)
		So(EqualUint64Int64Map(a, b), ShouldBeTrue)

		var key uint64
		var value int64
		for i := 0; i < 100; i++ {
			key = uint64(i)
			value = int64(i)
			a[key] = value
			b[key] = value
		}
		So(EqualUint64Int64Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualUint64Int64Map(a, b), ShouldBeFalse)
	})

	Convey("EqualUint64Int8Map", t, func() {
		So(EqualUint64Int8Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[uint64]int8), make(map[uint64]int8)
		So(EqualUint64Int8Map(a, nil), ShouldBeFalse)
		So(EqualUint64Int8Map(nil, a), ShouldBeFalse)
		So(EqualUint64Int8Map(a, b), ShouldBeTrue)

		var key uint64
		var value int8
		for i := 0; i < 100; i++ {
			key = uint64(i)
			value = int8(i)
			a[key] = value
			b[key] = value
		}
		So(EqualUint64Int8Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualUint64Int8Map(a, b), ShouldBeFalse)
	})

	Convey("EqualUint64StringMap", t, func() {
		So(EqualUint64StringMap(nil, nil), ShouldBeTrue)
		var a, b = make(map[uint64]string), make(map[uint64]string)
		So(EqualUint64StringMap(a, nil), ShouldBeFalse)
		So(EqualUint64StringMap(nil, a), ShouldBeFalse)
		So(EqualUint64StringMap(a, b), ShouldBeTrue)

		var key uint64
		var value string
		for i := 0; i < 100; i++ {
			key = uint64(i)
			value = strconv.FormatInt(int64(i), 10)
			a[key] = value
			b[key] = value
		}
		So(EqualUint64StringMap(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualUint64StringMap(a, b), ShouldBeFalse)
	})

	Convey("EqualUint64UintMap", t, func() {
		So(EqualUint64UintMap(nil, nil), ShouldBeTrue)
		var a, b = make(map[uint64]uint), make(map[uint64]uint)
		So(EqualUint64UintMap(a, nil), ShouldBeFalse)
		So(EqualUint64UintMap(nil, a), ShouldBeFalse)
		So(EqualUint64UintMap(a, b), ShouldBeTrue)

		var key uint64
		var value uint
		for i := 0; i < 100; i++ {
			key = uint64(i)
			value = uint(i)
			a[key] = value
			b[key] = value
		}
		So(EqualUint64UintMap(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualUint64UintMap(a, b), ShouldBeFalse)
	})

	Convey("EqualUint64Uint16Map", t, func() {
		So(EqualUint64Uint16Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[uint64]uint16), make(map[uint64]uint16)
		So(EqualUint64Uint16Map(a, nil), ShouldBeFalse)
		So(EqualUint64Uint16Map(nil, a), ShouldBeFalse)
		So(EqualUint64Uint16Map(a, b), ShouldBeTrue)

		var key uint64
		var value uint16
		for i := 0; i < 100; i++ {
			key = uint64(i)
			value = uint16(i)
			a[key] = value
			b[key] = value
		}
		So(EqualUint64Uint16Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualUint64Uint16Map(a, b), ShouldBeFalse)
	})

	Convey("EqualUint64Uint32Map", t, func() {
		So(EqualUint64Uint32Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[uint64]uint32), make(map[uint64]uint32)
		So(EqualUint64Uint32Map(a, nil), ShouldBeFalse)
		So(EqualUint64Uint32Map(nil, a), ShouldBeFalse)
		So(EqualUint64Uint32Map(a, b), ShouldBeTrue)

		var key uint64
		var value uint32
		for i := 0; i < 100; i++ {
			key = uint64(i)
			value = uint32(i)
			a[key] = value
			b[key] = value
		}
		So(EqualUint64Uint32Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualUint64Uint32Map(a, b), ShouldBeFalse)
	})

	Convey("EqualUint64Uint64Map", t, func() {
		So(EqualUint64Uint64Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[uint64]uint64), make(map[uint64]uint64)
		So(EqualUint64Uint64Map(a, nil), ShouldBeFalse)
		So(EqualUint64Uint64Map(nil, a), ShouldBeFalse)
		So(EqualUint64Uint64Map(a, b), ShouldBeTrue)

		var key uint64
		var value uint64
		for i := 0; i < 100; i++ {
			key = uint64(i)
			value = uint64(i)
			a[key] = value
			b[key] = value
		}
		So(EqualUint64Uint64Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualUint64Uint64Map(a, b), ShouldBeFalse)
	})

	Convey("EqualUint64Uint8Map", t, func() {
		So(EqualUint64Uint8Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[uint64]uint8), make(map[uint64]uint8)
		So(EqualUint64Uint8Map(a, nil), ShouldBeFalse)
		So(EqualUint64Uint8Map(nil, a), ShouldBeFalse)
		So(EqualUint64Uint8Map(a, b), ShouldBeTrue)

		var key uint64
		var value uint8
		for i := 0; i < 100; i++ {
			key = uint64(i)
			value = uint8(i)
			a[key] = value
			b[key] = value
		}
		So(EqualUint64Uint8Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualUint64Uint8Map(a, b), ShouldBeFalse)
	})

	Convey("EqualUint8Float32Map", t, func() {
		So(EqualUint8Float32Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[uint8]float32), make(map[uint8]float32)
		So(EqualUint8Float32Map(a, nil), ShouldBeFalse)
		So(EqualUint8Float32Map(nil, a), ShouldBeFalse)
		So(EqualUint8Float32Map(a, b), ShouldBeTrue)

		var key uint8
		var value float32
		for i := 0; i < 100; i++ {
			key = uint8(i)
			value = float32(i)
			a[key] = value
			b[key] = value
		}
		So(EqualUint8Float32Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualUint8Float32Map(a, b), ShouldBeFalse)
	})

	Convey("EqualUint8Float64Map", t, func() {
		So(EqualUint8Float64Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[uint8]float64), make(map[uint8]float64)
		So(EqualUint8Float64Map(a, nil), ShouldBeFalse)
		So(EqualUint8Float64Map(nil, a), ShouldBeFalse)
		So(EqualUint8Float64Map(a, b), ShouldBeTrue)

		var key uint8
		var value float64
		for i := 0; i < 100; i++ {
			key = uint8(i)
			value = float64(i)
			a[key] = value
			b[key] = value
		}
		So(EqualUint8Float64Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualUint8Float64Map(a, b), ShouldBeFalse)
	})

	Convey("EqualUint8IntMap", t, func() {
		So(EqualUint8IntMap(nil, nil), ShouldBeTrue)
		var a, b = make(map[uint8]int), make(map[uint8]int)
		So(EqualUint8IntMap(a, nil), ShouldBeFalse)
		So(EqualUint8IntMap(nil, a), ShouldBeFalse)
		So(EqualUint8IntMap(a, b), ShouldBeTrue)

		var key uint8
		var value int
		for i := 0; i < 100; i++ {
			key = uint8(i)
			value = i
			a[key] = value
			b[key] = value
		}
		So(EqualUint8IntMap(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualUint8IntMap(a, b), ShouldBeFalse)
	})

	Convey("EqualUint8Int16Map", t, func() {
		So(EqualUint8Int16Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[uint8]int16), make(map[uint8]int16)
		So(EqualUint8Int16Map(a, nil), ShouldBeFalse)
		So(EqualUint8Int16Map(nil, a), ShouldBeFalse)
		So(EqualUint8Int16Map(a, b), ShouldBeTrue)

		var key uint8
		var value int16
		for i := 0; i < 100; i++ {
			key = uint8(i)
			value = int16(i)
			a[key] = value
			b[key] = value
		}
		So(EqualUint8Int16Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualUint8Int16Map(a, b), ShouldBeFalse)
	})

	Convey("EqualUint8Int32Map", t, func() {
		So(EqualUint8Int32Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[uint8]int32), make(map[uint8]int32)
		So(EqualUint8Int32Map(a, nil), ShouldBeFalse)
		So(EqualUint8Int32Map(nil, a), ShouldBeFalse)
		So(EqualUint8Int32Map(a, b), ShouldBeTrue)

		var key uint8
		var value int32
		for i := 0; i < 100; i++ {
			key = uint8(i)
			value = int32(i)
			a[key] = value
			b[key] = value
		}
		So(EqualUint8Int32Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualUint8Int32Map(a, b), ShouldBeFalse)
	})

	Convey("EqualUint8Int64Map", t, func() {
		So(EqualUint8Int64Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[uint8]int64), make(map[uint8]int64)
		So(EqualUint8Int64Map(a, nil), ShouldBeFalse)
		So(EqualUint8Int64Map(nil, a), ShouldBeFalse)
		So(EqualUint8Int64Map(a, b), ShouldBeTrue)

		var key uint8
		var value int64
		for i := 0; i < 100; i++ {
			key = uint8(i)
			value = int64(i)
			a[key] = value
			b[key] = value
		}
		So(EqualUint8Int64Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualUint8Int64Map(a, b), ShouldBeFalse)
	})

	Convey("EqualUint8Int8Map", t, func() {
		So(EqualUint8Int8Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[uint8]int8), make(map[uint8]int8)
		So(EqualUint8Int8Map(a, nil), ShouldBeFalse)
		So(EqualUint8Int8Map(nil, a), ShouldBeFalse)
		So(EqualUint8Int8Map(a, b), ShouldBeTrue)

		var key uint8
		var value int8
		for i := 0; i < 100; i++ {
			key = uint8(i)
			value = int8(i)
			a[key] = value
			b[key] = value
		}
		So(EqualUint8Int8Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualUint8Int8Map(a, b), ShouldBeFalse)
	})

	Convey("EqualUint8StringMap", t, func() {
		So(EqualUint8StringMap(nil, nil), ShouldBeTrue)
		var a, b = make(map[uint8]string), make(map[uint8]string)
		So(EqualUint8StringMap(a, nil), ShouldBeFalse)
		So(EqualUint8StringMap(nil, a), ShouldBeFalse)
		So(EqualUint8StringMap(a, b), ShouldBeTrue)

		var key uint8
		var value string
		for i := 0; i < 100; i++ {
			key = uint8(i)
			value = strconv.FormatInt(int64(i), 10)
			a[key] = value
			b[key] = value
		}
		So(EqualUint8StringMap(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualUint8StringMap(a, b), ShouldBeFalse)
	})

	Convey("EqualUint8UintMap", t, func() {
		So(EqualUint8UintMap(nil, nil), ShouldBeTrue)
		var a, b = make(map[uint8]uint), make(map[uint8]uint)
		So(EqualUint8UintMap(a, nil), ShouldBeFalse)
		So(EqualUint8UintMap(nil, a), ShouldBeFalse)
		So(EqualUint8UintMap(a, b), ShouldBeTrue)

		var key uint8
		var value uint
		for i := 0; i < 100; i++ {
			key = uint8(i)
			value = uint(i)
			a[key] = value
			b[key] = value
		}
		So(EqualUint8UintMap(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualUint8UintMap(a, b), ShouldBeFalse)
	})

	Convey("EqualUint8Uint16Map", t, func() {
		So(EqualUint8Uint16Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[uint8]uint16), make(map[uint8]uint16)
		So(EqualUint8Uint16Map(a, nil), ShouldBeFalse)
		So(EqualUint8Uint16Map(nil, a), ShouldBeFalse)
		So(EqualUint8Uint16Map(a, b), ShouldBeTrue)

		var key uint8
		var value uint16
		for i := 0; i < 100; i++ {
			key = uint8(i)
			value = uint16(i)
			a[key] = value
			b[key] = value
		}
		So(EqualUint8Uint16Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualUint8Uint16Map(a, b), ShouldBeFalse)
	})

	Convey("EqualUint8Uint32Map", t, func() {
		So(EqualUint8Uint32Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[uint8]uint32), make(map[uint8]uint32)
		So(EqualUint8Uint32Map(a, nil), ShouldBeFalse)
		So(EqualUint8Uint32Map(nil, a), ShouldBeFalse)
		So(EqualUint8Uint32Map(a, b), ShouldBeTrue)

		var key uint8
		var value uint32
		for i := 0; i < 100; i++ {
			key = uint8(i)
			value = uint32(i)
			a[key] = value
			b[key] = value
		}
		So(EqualUint8Uint32Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualUint8Uint32Map(a, b), ShouldBeFalse)
	})

	Convey("EqualUint8Uint64Map", t, func() {
		So(EqualUint8Uint64Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[uint8]uint64), make(map[uint8]uint64)
		So(EqualUint8Uint64Map(a, nil), ShouldBeFalse)
		So(EqualUint8Uint64Map(nil, a), ShouldBeFalse)
		So(EqualUint8Uint64Map(a, b), ShouldBeTrue)

		var key uint8
		var value uint64
		for i := 0; i < 100; i++ {
			key = uint8(i)
			value = uint64(i)
			a[key] = value
			b[key] = value
		}
		So(EqualUint8Uint64Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualUint8Uint64Map(a, b), ShouldBeFalse)
	})

	Convey("EqualUint8Uint8Map", t, func() {
		So(EqualUint8Uint8Map(nil, nil), ShouldBeTrue)
		var a, b = make(map[uint8]uint8), make(map[uint8]uint8)
		So(EqualUint8Uint8Map(a, nil), ShouldBeFalse)
		So(EqualUint8Uint8Map(nil, a), ShouldBeFalse)
		So(EqualUint8Uint8Map(a, b), ShouldBeTrue)

		var key uint8
		var value uint8
		for i := 0; i < 100; i++ {
			key = uint8(i)
			value = uint8(i)
			a[key] = value
			b[key] = value
		}
		So(EqualUint8Uint8Map(a, b), ShouldBeTrue)
		delete(a, key)
		So(EqualUint8Uint8Map(a, b), ShouldBeFalse)
	})
}
