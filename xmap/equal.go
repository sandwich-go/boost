// Code generated by tools. DO NOT EDIT.
package xmap

func EqualFloat32Float32Map(a, b map[float32]float32) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualFloat32Float64Map(a, b map[float32]float64) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualFloat32IntMap(a, b map[float32]int) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualFloat32Int16Map(a, b map[float32]int16) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualFloat32Int32Map(a, b map[float32]int32) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualFloat32Int64Map(a, b map[float32]int64) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualFloat32Int8Map(a, b map[float32]int8) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualFloat32StringMap(a, b map[float32]string) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualFloat32UintMap(a, b map[float32]uint) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualFloat32Uint16Map(a, b map[float32]uint16) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualFloat32Uint32Map(a, b map[float32]uint32) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualFloat32Uint64Map(a, b map[float32]uint64) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualFloat32Uint8Map(a, b map[float32]uint8) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualFloat64Float32Map(a, b map[float64]float32) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualFloat64Float64Map(a, b map[float64]float64) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualFloat64IntMap(a, b map[float64]int) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualFloat64Int16Map(a, b map[float64]int16) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualFloat64Int32Map(a, b map[float64]int32) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualFloat64Int64Map(a, b map[float64]int64) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualFloat64Int8Map(a, b map[float64]int8) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualFloat64StringMap(a, b map[float64]string) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualFloat64UintMap(a, b map[float64]uint) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualFloat64Uint16Map(a, b map[float64]uint16) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualFloat64Uint32Map(a, b map[float64]uint32) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualFloat64Uint64Map(a, b map[float64]uint64) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualFloat64Uint8Map(a, b map[float64]uint8) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualIntFloat32Map(a, b map[int]float32) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualIntFloat64Map(a, b map[int]float64) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualIntIntMap(a, b map[int]int) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualIntInt16Map(a, b map[int]int16) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualIntInt32Map(a, b map[int]int32) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualIntInt64Map(a, b map[int]int64) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualIntInt8Map(a, b map[int]int8) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualIntStringMap(a, b map[int]string) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualIntUintMap(a, b map[int]uint) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualIntUint16Map(a, b map[int]uint16) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualIntUint32Map(a, b map[int]uint32) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualIntUint64Map(a, b map[int]uint64) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualIntUint8Map(a, b map[int]uint8) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualInt16Float32Map(a, b map[int16]float32) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualInt16Float64Map(a, b map[int16]float64) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualInt16IntMap(a, b map[int16]int) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualInt16Int16Map(a, b map[int16]int16) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualInt16Int32Map(a, b map[int16]int32) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualInt16Int64Map(a, b map[int16]int64) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualInt16Int8Map(a, b map[int16]int8) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualInt16StringMap(a, b map[int16]string) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualInt16UintMap(a, b map[int16]uint) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualInt16Uint16Map(a, b map[int16]uint16) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualInt16Uint32Map(a, b map[int16]uint32) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualInt16Uint64Map(a, b map[int16]uint64) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualInt16Uint8Map(a, b map[int16]uint8) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualInt32Float32Map(a, b map[int32]float32) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualInt32Float64Map(a, b map[int32]float64) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualInt32IntMap(a, b map[int32]int) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualInt32Int16Map(a, b map[int32]int16) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualInt32Int32Map(a, b map[int32]int32) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualInt32Int64Map(a, b map[int32]int64) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualInt32Int8Map(a, b map[int32]int8) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualInt32StringMap(a, b map[int32]string) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualInt32UintMap(a, b map[int32]uint) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualInt32Uint16Map(a, b map[int32]uint16) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualInt32Uint32Map(a, b map[int32]uint32) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualInt32Uint64Map(a, b map[int32]uint64) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualInt32Uint8Map(a, b map[int32]uint8) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualInt64Float32Map(a, b map[int64]float32) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualInt64Float64Map(a, b map[int64]float64) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualInt64IntMap(a, b map[int64]int) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualInt64Int16Map(a, b map[int64]int16) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualInt64Int32Map(a, b map[int64]int32) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualInt64Int64Map(a, b map[int64]int64) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualInt64Int8Map(a, b map[int64]int8) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualInt64StringMap(a, b map[int64]string) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualInt64UintMap(a, b map[int64]uint) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualInt64Uint16Map(a, b map[int64]uint16) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualInt64Uint32Map(a, b map[int64]uint32) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualInt64Uint64Map(a, b map[int64]uint64) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualInt64Uint8Map(a, b map[int64]uint8) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualInt8Float32Map(a, b map[int8]float32) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualInt8Float64Map(a, b map[int8]float64) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualInt8IntMap(a, b map[int8]int) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualInt8Int16Map(a, b map[int8]int16) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualInt8Int32Map(a, b map[int8]int32) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualInt8Int64Map(a, b map[int8]int64) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualInt8Int8Map(a, b map[int8]int8) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualInt8StringMap(a, b map[int8]string) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualInt8UintMap(a, b map[int8]uint) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualInt8Uint16Map(a, b map[int8]uint16) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualInt8Uint32Map(a, b map[int8]uint32) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualInt8Uint64Map(a, b map[int8]uint64) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualInt8Uint8Map(a, b map[int8]uint8) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualStringFloat32Map(a, b map[string]float32) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualStringFloat64Map(a, b map[string]float64) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualStringIntMap(a, b map[string]int) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualStringInt16Map(a, b map[string]int16) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualStringInt32Map(a, b map[string]int32) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualStringInt64Map(a, b map[string]int64) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualStringInt8Map(a, b map[string]int8) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualStringStringMap(a, b map[string]string) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualStringUintMap(a, b map[string]uint) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualStringUint16Map(a, b map[string]uint16) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualStringUint32Map(a, b map[string]uint32) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualStringUint64Map(a, b map[string]uint64) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualStringUint8Map(a, b map[string]uint8) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualUintFloat32Map(a, b map[uint]float32) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualUintFloat64Map(a, b map[uint]float64) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualUintIntMap(a, b map[uint]int) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualUintInt16Map(a, b map[uint]int16) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualUintInt32Map(a, b map[uint]int32) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualUintInt64Map(a, b map[uint]int64) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualUintInt8Map(a, b map[uint]int8) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualUintStringMap(a, b map[uint]string) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualUintUintMap(a, b map[uint]uint) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualUintUint16Map(a, b map[uint]uint16) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualUintUint32Map(a, b map[uint]uint32) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualUintUint64Map(a, b map[uint]uint64) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualUintUint8Map(a, b map[uint]uint8) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualUint16Float32Map(a, b map[uint16]float32) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualUint16Float64Map(a, b map[uint16]float64) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualUint16IntMap(a, b map[uint16]int) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualUint16Int16Map(a, b map[uint16]int16) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualUint16Int32Map(a, b map[uint16]int32) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualUint16Int64Map(a, b map[uint16]int64) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualUint16Int8Map(a, b map[uint16]int8) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualUint16StringMap(a, b map[uint16]string) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualUint16UintMap(a, b map[uint16]uint) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualUint16Uint16Map(a, b map[uint16]uint16) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualUint16Uint32Map(a, b map[uint16]uint32) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualUint16Uint64Map(a, b map[uint16]uint64) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualUint16Uint8Map(a, b map[uint16]uint8) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualUint32Float32Map(a, b map[uint32]float32) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualUint32Float64Map(a, b map[uint32]float64) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualUint32IntMap(a, b map[uint32]int) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualUint32Int16Map(a, b map[uint32]int16) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualUint32Int32Map(a, b map[uint32]int32) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualUint32Int64Map(a, b map[uint32]int64) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualUint32Int8Map(a, b map[uint32]int8) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualUint32StringMap(a, b map[uint32]string) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualUint32UintMap(a, b map[uint32]uint) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualUint32Uint16Map(a, b map[uint32]uint16) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualUint32Uint32Map(a, b map[uint32]uint32) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualUint32Uint64Map(a, b map[uint32]uint64) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualUint32Uint8Map(a, b map[uint32]uint8) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualUint64Float32Map(a, b map[uint64]float32) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualUint64Float64Map(a, b map[uint64]float64) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualUint64IntMap(a, b map[uint64]int) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualUint64Int16Map(a, b map[uint64]int16) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualUint64Int32Map(a, b map[uint64]int32) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualUint64Int64Map(a, b map[uint64]int64) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualUint64Int8Map(a, b map[uint64]int8) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualUint64StringMap(a, b map[uint64]string) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualUint64UintMap(a, b map[uint64]uint) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualUint64Uint16Map(a, b map[uint64]uint16) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualUint64Uint32Map(a, b map[uint64]uint32) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualUint64Uint64Map(a, b map[uint64]uint64) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualUint64Uint8Map(a, b map[uint64]uint8) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualUint8Float32Map(a, b map[uint8]float32) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualUint8Float64Map(a, b map[uint8]float64) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualUint8IntMap(a, b map[uint8]int) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualUint8Int16Map(a, b map[uint8]int16) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualUint8Int32Map(a, b map[uint8]int32) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualUint8Int64Map(a, b map[uint8]int64) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualUint8Int8Map(a, b map[uint8]int8) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualUint8StringMap(a, b map[uint8]string) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualUint8UintMap(a, b map[uint8]uint) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualUint8Uint16Map(a, b map[uint8]uint16) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualUint8Uint32Map(a, b map[uint8]uint32) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualUint8Uint64Map(a, b map[uint8]uint64) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}

func EqualUint8Uint8Map(a, b map[uint8]uint8) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}
