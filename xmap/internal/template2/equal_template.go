package template2

import "sort"

type EqualConfig struct {
	Key, Value string
}

func GetEqualTPLArgs() interface{} {
	var equalConfigs = make([]EqualConfig, 0)
	var types = []string{
		"int", "int8", "int16", "int32", "int64",
		"uint", "uint8", "uint16", "uint32", "uint64",
		"float32", "float64",
		"string",
	}
	for _, tk := range types {
		for _, tv := range types {
			equalConfigs = append(equalConfigs, EqualConfig{
				Key:   tk,
				Value: tv,
			})
		}
	}
	sort.Slice(equalConfigs, func(i, j int) bool {
		if equalConfigs[i].Key == equalConfigs[j].Key {
			return equalConfigs[i].Value < equalConfigs[j].Value
		}
		return equalConfigs[i].Key < equalConfigs[j].Key
	})
	return map[string]interface{}{"EqualConfigs": equalConfigs}
}

const EqualTestTPL = `// Code generated by tools. DO NOT EDIT.
package xmap

import (
	. "github.com/smartystreets/goconvey/convey"
	"strconv"
	"testing"
)

func TestEqualMap(t *testing.T) {
{{- range $equalConfig := .EqualConfigs }}
	{{- $camelCaseKey := $equalConfig.Key | CamelCase }}
	{{- $camelCaseValue := $equalConfig.Value | CamelCase | trimSuffix "{}" }}
	{{- $equalMapName := print "Equal" $camelCaseKey $camelCaseValue "Map" }}
	Convey("{{ $equalMapName }}", t, func() {
		So({{ $equalMapName }}(nil, nil), ShouldBeTrue)
		var a, b = make(map[{{ $equalConfig.Key }}]{{ $equalConfig.Value }}), make(map[{{ $equalConfig.Key }}]{{ $equalConfig.Value }})
		So({{ $equalMapName }}(a, nil), ShouldBeFalse)
		So({{ $equalMapName }}(nil, a), ShouldBeFalse)
		So({{ $equalMapName }}(a, b), ShouldBeTrue)

		var key {{ $equalConfig.Key }}
		var value {{ $equalConfig.Value }}
		for i := 0; i {{ "<" | Unescaped }} 100; i++ {
			{{- if eq $equalConfig.Key "string" }}
			key = strconv.FormatInt(int64(i), 10)
			{{- else if eq $equalConfig.Key "int" }}
			key = i
			{{- else }}
			key = {{ $equalConfig.Key }}(i)
			{{- end }}
			{{- if eq $equalConfig.Value "string" }}
			value = strconv.FormatInt(int64(i), 10)
			{{- else if eq $equalConfig.Value "int" }}
			value = i
			{{- else }}
			value = {{ $equalConfig.Value }}(i)
			{{- end }}
			a[key] = value
			b[key] = value
		}
		So({{ $equalMapName }}(a, b), ShouldBeTrue)
		delete(a, key)
		So({{ $equalMapName }}(a, b), ShouldBeFalse)
	})
{{ end }}}
`

const EqualTPL = `// Code generated by tools. DO NOT EDIT.
package xmap

{{- range $equalConfig := .EqualConfigs }}
{{- $camelCaseKey := $equalConfig.Key | CamelCase }}
{{- $camelCaseValue := $equalConfig.Value | CamelCase | trimSuffix "{}" }}
{{- $equalMapName := print "Equal" $camelCaseKey $camelCaseValue "Map" }}
func {{ $equalMapName }}(a, b map[{{ $equalConfig.Key }}]{{ $equalConfig.Value }}) bool {
	if a == nil && b == nil {
		return true
	}
	if (a != nil && b == nil) || (b != nil && a == nil) || (len(a) != len(b)) {
		return false
	}
	for k, v := range a {
		v1, ok := b[k]
		if !ok || v != v1 {
			return false
		}
	}
	return true
}
{{ end }}
`
