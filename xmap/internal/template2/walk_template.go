package template2

import "sort"

type WalkConfig struct {
	Key, Value, Sort string
}

func GetWalkTPLArgs() interface{} {
	var walkConfigs = make([]WalkConfig, 0)
	var types = []string{
		"int", "int8", "int16", "int32", "int64",
		"uint", "uint8", "uint16", "uint32", "uint64",
		"float32", "float64",
		"string",
	}
	var sorts = map[string]string{
		"int":    "sort.Ints",
		"string": "sort.Strings",
	}
	for _, tk := range types {
		for _, tv := range append(types, "interface{}") {
			walkConfigs = append(walkConfigs, WalkConfig{
				Key:   tk,
				Value: tv,
				Sort:  sorts[tk],
			})
		}
	}
	sort.Slice(walkConfigs, func(i, j int) bool {
		if walkConfigs[i].Key == walkConfigs[j].Key {
			return walkConfigs[i].Value < walkConfigs[j].Value
		}
		return walkConfigs[i].Key < walkConfigs[j].Key
	})
	return map[string]interface{}{"WalkConfigs": walkConfigs}
}

const WalkTestTPL = `// Code generated by tools. DO NOT EDIT.
package xmap

import (
	. "github.com/smartystreets/goconvey/convey"
	"sort"
	"strconv"
	"testing"
)

func TestWalkMapDeterministic(t *testing.T) {
	var n = 100
{{- range $walkConfig := .WalkConfigs }}
	{{- $camelCaseKey := $walkConfig.Key | CamelCase}}
	{{- $camelCaseValue := $walkConfig.Value | CamelCase | trimSuffix "{}" }}
	{{- $walkMapName := print "Walk" $camelCaseKey $camelCaseValue "MapDeterministic" }}
	Convey("{{ $walkMapName }}", t, func() {
		var keys = make([]{{ $walkConfig.Key }}, 0, n)
		var value {{ $walkConfig.Value }} 
		var tm = make(map[{{ $walkConfig.Key }}]{{ $walkConfig.Value }})
		for i := 0; i {{ "<" | Unescaped }} n; i++ {
			var key {{ $walkConfig.Key }}
			{{- if eq $walkConfig.Key "string" }}
			key = strconv.FormatInt(int64(i), 10)
			{{- else if eq $walkConfig.Key "int" }}
			key = i
			{{- else }}
			key = {{ $walkConfig.Key }}(i)
			{{- end }}
			tm[key] = value	
			keys = append(keys, key)
		}
		{{- if eq $walkConfig.Sort "" }}
		sort.Slice(keys, func(i, j int) bool { return keys[i] {{ "<" | Unescaped }} keys[j] })
		{{- else }}
		{{ $walkConfig.Sort }}(keys)
		{{- end }}

		var dest = make([]{{ $walkConfig.Key }}, 0, n)
		{{ $walkMapName }}(tm, func(k {{ $walkConfig.Key }}, v {{ $walkConfig.Value }}) bool {
			dest = append(dest, k)
			return true
		})

		for k, v := range keys {
			So(v, ShouldEqual, dest[k])
		}
	})
{{ end }}}
`

const WalkTPL = `// Code generated by tools. DO NOT EDIT.
package xmap

import "sort"

var _ sort.Interface

{{- range $walkConfig := .WalkConfigs }}
{{- $camelCaseKey := $walkConfig.Key | CamelCase}}
{{- $camelCaseValue := $walkConfig.Value | CamelCase | trimSuffix "{}" }}
{{- $walkMapName := print "Walk" $camelCaseKey $camelCaseValue "MapDeterministic" }}
// {{ $walkMapName }} 有序遍历map
// walkFunc 函数返回 false，停止遍历
func {{ $walkMapName }}(in map[{{ $walkConfig.Key }}]{{ $walkConfig.Value }}, walkFunc func(k {{ $walkConfig.Key }}, v {{ $walkConfig.Value }}) bool) {
	var keys = make([]{{ $walkConfig.Key }}, 0, len(in))
	for k := range in {
		keys = append(keys, k)
	}
	{{- if eq $walkConfig.Sort "" }}
	sort.Slice(keys, func(i, j int) bool { return keys[i] {{ "<" | Unescaped }} keys[j] })
	{{- else }}
	{{ $walkConfig.Sort }}(keys)
	{{- end }}
	for _, k := range keys {
		if walkFunc(k, in[k]) {
			continue
		}
		break
	}
}
{{ end }}
`
