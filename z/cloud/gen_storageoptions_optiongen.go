// Code generated by optiongen. DO NOT EDIT.
// optiongen: github.com/timestee/optiongen

package cloud

// StorageOptions should use NewStorageOptions to initialize it
type StorageOptions struct {
	// annotation@Region(comment="云存储的Region")
	Region string
}

// NewStorageOptions new StorageOptions
func NewStorageOptions(opts ...StorageOption) *StorageOptions {
	cc := newDefaultStorageOptions()
	for _, opt := range opts {
		opt(cc)
	}
	if watchDogStorageOptions != nil {
		watchDogStorageOptions(cc)
	}
	return cc
}

// ApplyOption apply multiple new option
func (cc *StorageOptions) ApplyOption(opts ...StorageOption) {
	for _, opt := range opts {
		opt(cc)
	}
}

// StorageOption option func
type StorageOption func(cc *StorageOptions)

// WithRegion 云存储的Region
func WithRegion(v string) StorageOption {
	return func(cc *StorageOptions) {
		cc.Region = v
	}
}

// InstallStorageOptionsWatchDog the installed func will called when NewStorageOptions  called
func InstallStorageOptionsWatchDog(dog func(cc *StorageOptions)) { watchDogStorageOptions = dog }

// watchDogStorageOptions global watch dog
var watchDogStorageOptions func(cc *StorageOptions)

// newDefaultStorageOptions new default StorageOptions
func newDefaultStorageOptions() *StorageOptions {
	cc := &StorageOptions{}

	for _, opt := range [...]StorageOption{
		WithRegion(""),
	} {
		opt(cc)
	}

	return cc
}

// all getter func
func (cc *StorageOptions) GetRegion() string { return cc.Region }

// StorageOptionsVisitor visitor interface for StorageOptions
type StorageOptionsVisitor interface {
	GetRegion() string
}

// StorageOptionsInterface visitor + ApplyOption interface for StorageOptions
type StorageOptionsInterface interface {
	StorageOptionsVisitor
	ApplyOption(...StorageOption)
}
