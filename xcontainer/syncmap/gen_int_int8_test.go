// Code generated by gotemplate. DO NOT EDIT.

// syncmap 提供了一个同步的映射实现，允许安全并发的访问
package syncmap

import (
	"errors"

	. "github.com/smartystreets/goconvey/convey"

	"testing"
)

func TestIntInt8(t *testing.T) {
	Convey("test sync map", t, func() {
		for _, tr := range []*IntInt8{NewIntInt8()} {
			So(tr.Len(), ShouldBeZeroValue)
			var k, v = __formatKTypeToIntInt8(3), __formatVTypeToIntInt8(4)
			So(tr.Len(), ShouldEqual, 0)
			tr.Store(k, v)
			v1, ok := tr.Load(k)
			So(ok, ShouldBeTrue)
			So(v1, ShouldEqual, v)

			So(tr.Keys(), ShouldResemble, []int{__formatKTypeToIntInt8(3)})
			So(tr.Get(__formatKTypeToIntInt8(3)), ShouldEqual, __formatVTypeToIntInt8(4))
			So(tr.Contains(__formatKTypeToIntInt8(3)), ShouldBeTrue)

			tr.Store(__formatKTypeToIntInt8(4), __formatVTypeToIntInt8(5))
			tr.Store(__formatKTypeToIntInt8(5), __formatVTypeToIntInt8(6))
			ol := tr.Len()
			tr.DeleteMultiple(__formatKTypeToIntInt8(4), __formatKTypeToIntInt8(5))
			So(tr.Len(), ShouldEqual, ol-2)

			ol = tr.Len()
			tr.Store(__formatKTypeToIntInt8(4), __formatVTypeToIntInt8(5))
			tr.Store(__formatKTypeToIntInt8(5), __formatVTypeToIntInt8(6))
			vl, ok := tr.LoadAndDelete(__formatKTypeToIntInt8(4))
			So(vl, ShouldEqual, __formatVTypeToIntInt8(5))
			So(ok, ShouldBeTrue)
			So(tr.Len(), ShouldEqual, ol+1)

			tr.Store(__formatKTypeToIntInt8(4), __formatVTypeToIntInt8(5))
			fge := []func(key int, cf func(key int) (int8, error)) (value int8, loaded bool, err error){tr.GetOrSetFuncErrorLock}
			defv, defv2 := __formatVTypeToIntInt8(6), __formatVTypeToIntInt8(7)
			for _, f := range fge {
				v, l, e := f(__formatKTypeToIntInt8(6), func(key int) (int8, error) {
					return defv, nil
				})
				So(v, ShouldEqual, defv)
				So(l, ShouldBeFalse)
				So(e, ShouldBeNil)

				v, l, e = f(__formatKTypeToIntInt8(7), func(key int) (int8, error) {
					return defv2, errors.New("")
				})
				So(v, ShouldEqual, defv2)
				So(l, ShouldBeFalse)
				So(e, ShouldNotBeNil)
			}
			fg := []func(key int, cf func(key int) int8) (value int8, loaded bool){tr.GetOrSetFuncLock}
			for _, f := range fg {
				v, l := f(__formatKTypeToIntInt8(7), func(key int) int8 {
					return defv2
				})
				So(v, ShouldEqual, defv2)
				So(l, ShouldBeFalse)
			}

			v, ok = tr.LoadOrStore(__formatKTypeToIntInt8(8), __formatVTypeToIntInt8(9))
			So(v, ShouldEqual, __formatVTypeToIntInt8(9))
			So(ok, ShouldBeFalse)

			So(func() {
				tr.Range(func(key int, value int8) bool {
					return true
				})
			}, ShouldNotPanic)

		}
	})
}
