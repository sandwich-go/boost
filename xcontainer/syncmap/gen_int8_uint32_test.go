// Code generated by gotemplate. DO NOT EDIT.

// syncmap 提供了一个同步的映射实现，允许安全并发的访问
package syncmap

import (
	"errors"

	. "github.com/smartystreets/goconvey/convey"

	"testing"
)

func TestInt8Uint32(t *testing.T) {
	Convey("test sync map", t, func() {
		for _, tr := range []*Int8Uint32{NewInt8Uint32()} {
			So(tr.Len(), ShouldBeZeroValue)
			var k, v = __formatKTypeToInt8Uint32(3), __formatVTypeToInt8Uint32(4)
			So(tr.Len(), ShouldEqual, 0)
			tr.Store(k, v)
			v1, ok := tr.Load(k)
			So(ok, ShouldBeTrue)
			So(v1, ShouldEqual, v)

			So(tr.Keys(), ShouldResemble, []int8{__formatKTypeToInt8Uint32(3)})
			So(tr.Get(__formatKTypeToInt8Uint32(3)), ShouldEqual, __formatVTypeToInt8Uint32(4))
			So(tr.Contains(__formatKTypeToInt8Uint32(3)), ShouldBeTrue)

			tr.Store(__formatKTypeToInt8Uint32(4), __formatVTypeToInt8Uint32(5))
			tr.Store(__formatKTypeToInt8Uint32(5), __formatVTypeToInt8Uint32(6))
			ol := tr.Len()
			tr.DeleteMultiple(__formatKTypeToInt8Uint32(4), __formatKTypeToInt8Uint32(5))
			So(tr.Len(), ShouldEqual, ol-2)

			ol = tr.Len()
			tr.Store(__formatKTypeToInt8Uint32(4), __formatVTypeToInt8Uint32(5))
			tr.Store(__formatKTypeToInt8Uint32(5), __formatVTypeToInt8Uint32(6))
			vl, ok := tr.LoadAndDelete(__formatKTypeToInt8Uint32(4))
			So(vl, ShouldEqual, __formatVTypeToInt8Uint32(5))
			So(ok, ShouldBeTrue)
			So(tr.Len(), ShouldEqual, ol+1)

			tr.Store(__formatKTypeToInt8Uint32(4), __formatVTypeToInt8Uint32(5))
			fge := []func(key int8, cf func(key int8) (uint32, error)) (value uint32, loaded bool, err error){tr.GetOrSetFuncErrorLock}
			defv, defv2 := __formatVTypeToInt8Uint32(6), __formatVTypeToInt8Uint32(7)
			for _, f := range fge {
				v, l, e := f(__formatKTypeToInt8Uint32(6), func(key int8) (uint32, error) {
					return defv, nil
				})
				So(v, ShouldEqual, defv)
				So(l, ShouldBeFalse)
				So(e, ShouldBeNil)

				v, l, e = f(__formatKTypeToInt8Uint32(7), func(key int8) (uint32, error) {
					return defv2, errors.New("")
				})
				So(v, ShouldEqual, defv2)
				So(l, ShouldBeFalse)
				So(e, ShouldNotBeNil)
			}
			fg := []func(key int8, cf func(key int8) uint32) (value uint32, loaded bool){tr.GetOrSetFuncLock}
			for _, f := range fg {
				v, l := f(__formatKTypeToInt8Uint32(7), func(key int8) uint32 {
					return defv2
				})
				So(v, ShouldEqual, defv2)
				So(l, ShouldBeFalse)
			}

			v, ok = tr.LoadOrStore(__formatKTypeToInt8Uint32(8), __formatVTypeToInt8Uint32(9))
			So(v, ShouldEqual, __formatVTypeToInt8Uint32(9))
			So(ok, ShouldBeFalse)

			So(func() {
				tr.Range(func(key int8, value uint32) bool {
					return true
				})
			}, ShouldNotPanic)

		}
	})
}
