// Code generated by gotemplate. DO NOT EDIT.

package smap

import (
	. "github.com/smartystreets/goconvey/convey"

	"testing"
)

func TestSMapIntString(t *testing.T) {
	Convey("test sync array", t, func() {
		tr := NewIntString()
		So(tr.Len(), ShouldEqual, 0)
		So(tr.IsEmpty(), ShouldBeTrue)
		tr.Set(__formatKTypeToIntString(1), __formatVTypeToIntString(1))
		So(tr.Len(), ShouldEqual, 1)

		tr.Set(__formatKTypeToIntString(1), __formatVTypeToIntString(2))
		So(tr.Len(), ShouldEqual, 1)
		tr.Set(__formatKTypeToIntString(2), __formatVTypeToIntString(2))
		So(tr.Len(), ShouldEqual, 2)

		So(tr.Keys(), ShouldContain, __formatKTypeToIntString(1))
		So(tr.Keys(), ShouldContain, __formatKTypeToIntString(2))

		So(tr.GetAll(), ShouldContainKey, __formatKTypeToIntString(1))
		So(tr.GetAll(), ShouldContainKey, __formatKTypeToIntString(2))

		tr.Clear()
		So(tr.Len(), ShouldEqual, 0)

		tr.Set(__formatKTypeToIntString(1), __formatVTypeToIntString(2))
		tr.Set(__formatKTypeToIntString(2), __formatVTypeToIntString(2))
		So(func() {
			tr.ClearWithFuncLock(func(key int, val string) {
				return
			})
		}, ShouldNotPanic)

		tr.Set(__formatKTypeToIntString(1), __formatVTypeToIntString(1))
		tr.Set(__formatKTypeToIntString(2), __formatVTypeToIntString(2))
		tr.Set(__formatKTypeToIntString(3), __formatVTypeToIntString(3))
		tr.Set(__formatKTypeToIntString(4), __formatVTypeToIntString(4))
		mk := []int{__formatKTypeToIntString(1), __formatKTypeToIntString(2), __formatKTypeToIntString(3)}
		m := tr.MGet(mk...)
		for _, k := range mk {
			So(m, ShouldContainKey, k)
		}

		tr2 := NewIntString()
		tr2.MSet(m)
		So(tr2.Len(), ShouldEqual, len(mk))

		So(tr2.SetNX(__formatKTypeToIntString(5), __formatVTypeToIntString(5)), ShouldBeTrue)
		So(tr2.SetNX(__formatKTypeToIntString(1), __formatVTypeToIntString(5)), ShouldBeFalse)

		So(func() {
			tr2.LockFuncWithKey(__formatKTypeToIntString(5), func(shardData map[int]string) {
				return
			})
		}, ShouldNotPanic)
		So(func() {
			tr2.RLockFuncWithKey(__formatKTypeToIntString(5), func(shardData map[int]string) {
				return
			})
		}, ShouldNotPanic)
		So(func() {
			tr2.LockFunc(func(shardData map[int]string) {
				return
			})
		}, ShouldNotPanic)
		So(func() {
			tr2.RLockFunc(func(shardData map[int]string) {
				return
			})
		}, ShouldNotPanic)

		dfv := __formatVTypeToIntString(1)
		r, ret := tr2.GetOrSetFunc(__formatKTypeToIntString(1), func(key int) string {
			return dfv
		})
		So(r, ShouldEqual, dfv)
		So(ret, ShouldBeFalse)
		r, ret = tr2.GetOrSetFuncLock(__formatKTypeToIntString(1), func(key int) string {
			return dfv
		})
		So(r, ShouldEqual, dfv)
		So(ret, ShouldBeFalse)

		_, ret = tr2.GetOrSet(__formatKTypeToIntString(1), __formatVTypeToIntString(1))
		So(ret, ShouldBeFalse)
		r, ret = tr2.GetOrSet(__formatKTypeToIntString(10), __formatVTypeToIntString(10))

		So(ret, ShouldBeTrue)
	})
}
