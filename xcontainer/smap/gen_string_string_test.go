// Code generated by gotemplate. DO NOT EDIT.

// smap 包提供了一个分片的协程安全的映射
// NewWithSharedCount 返回一个线程安全的映射实例
// New 返回一个线程安全的映射实例
package smap

import (
	. "github.com/smartystreets/goconvey/convey"

	"testing"
)

func TestSMapStringString(t *testing.T) {
	Convey("test sync array", t, func() {
		tr := NewStringString()
		So(tr.Len(), ShouldEqual, 0)
		So(tr.IsEmpty(), ShouldBeTrue)
		tr.Set(__formatKTypeToStringString(1), __formatVTypeToStringString(1))
		So(tr.Len(), ShouldEqual, 1)

		tr.Set(__formatKTypeToStringString(1), __formatVTypeToStringString(2))
		So(tr.Len(), ShouldEqual, 1)
		tr.Set(__formatKTypeToStringString(2), __formatVTypeToStringString(2))
		So(tr.Len(), ShouldEqual, 2)
		So(tr.Count(), ShouldEqual, 2)
		So(tr.Size(), ShouldEqual, 2)

		So(tr.Keys(), ShouldContain, __formatKTypeToStringString(1))
		So(tr.Keys(), ShouldContain, __formatKTypeToStringString(2))

		So(tr.GetAll(), ShouldContainKey, __formatKTypeToStringString(1))
		So(tr.GetAll(), ShouldContainKey, __formatKTypeToStringString(2))

		tr.Clear()
		So(tr.Len(), ShouldEqual, 0)

		tr.Set(__formatKTypeToStringString(1), __formatVTypeToStringString(2))
		tr.Set(__formatKTypeToStringString(2), __formatVTypeToStringString(2))
		So(func() {
			tr.ClearWithFuncLock(func(key string, val string) {
				return
			})
		}, ShouldNotPanic)

		tr.Set(__formatKTypeToStringString(1), __formatVTypeToStringString(1))
		tr.Set(__formatKTypeToStringString(2), __formatVTypeToStringString(2))
		tr.Set(__formatKTypeToStringString(3), __formatVTypeToStringString(3))
		tr.Set(__formatKTypeToStringString(4), __formatVTypeToStringString(4))
		mk := []string{__formatKTypeToStringString(1), __formatKTypeToStringString(2), __formatKTypeToStringString(3)}
		m := tr.MGet(mk...)
		for _, k := range mk {
			So(m, ShouldContainKey, k)
		}

		tr2 := NewStringString()
		tr2.MSet(m)
		So(tr2.Len(), ShouldEqual, len(mk))

		So(tr2.SetNX(__formatKTypeToStringString(5), __formatVTypeToStringString(5)), ShouldBeTrue)
		So(tr2.SetNX(__formatKTypeToStringString(1), __formatVTypeToStringString(5)), ShouldBeFalse)

		So(func() {
			tr2.LockFuncWithKey(__formatKTypeToStringString(5), func(shardData map[string]string) {
				return
			})
		}, ShouldNotPanic)
		So(func() {
			tr2.RLockFuncWithKey(__formatKTypeToStringString(5), func(shardData map[string]string) {
				return
			})
		}, ShouldNotPanic)
		So(func() {
			tr2.LockFunc(func(shardData map[string]string) {
				return
			})
		}, ShouldNotPanic)
		So(func() {
			tr2.RLockFunc(func(shardData map[string]string) {
				return
			})
		}, ShouldNotPanic)

		dfv := __formatVTypeToStringString(1)
		r, ret := tr2.GetOrSetFunc(__formatKTypeToStringString(1), func(key string) string {
			return dfv
		})
		So(r, ShouldEqual, dfv)
		So(ret, ShouldBeFalse)
		r, ret = tr2.GetOrSetFuncLock(__formatKTypeToStringString(1), func(key string) string {
			return dfv
		})
		So(r, ShouldEqual, dfv)
		So(ret, ShouldBeFalse)

		_, ret = tr2.GetOrSet(__formatKTypeToStringString(1), __formatVTypeToStringString(1))
		So(ret, ShouldBeFalse)
		r, ret = tr2.GetOrSet(__formatKTypeToStringString(10), __formatVTypeToStringString(10))
		So(r, ShouldEqual, __formatVTypeToStringString(10))
		So(ret, ShouldBeTrue)

		So(tr.Has(__formatKTypeToStringString(1)), ShouldBeTrue)

		tr2.Remove(__formatKTypeToStringString(1))
		v, ret := tr2.GetAndRemove(__formatKTypeToStringString(10))
		So(v, ShouldEqual, __formatVTypeToStringString(10))
		So(ret, ShouldBeTrue)

		for _, f := range []func() <-chan TupleStringString{
			tr2.Iter, tr2.IterBuffered,
		} {
			cnt := 0
			for v := range f() {
				cnt++
				So(v.Key, ShouldBeIn, []string{__formatKTypeToStringString(2), __formatKTypeToStringString(3), __formatKTypeToStringString(5)})
				So(v.Val, ShouldBeIn, []string{__formatVTypeToStringString(2), __formatVTypeToStringString(3), __formatVTypeToStringString(5)})
			}
			So(cnt, ShouldEqual, 3)
		}

	})
}
