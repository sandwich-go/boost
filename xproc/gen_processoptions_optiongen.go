// Code generated by optiongen. DO NOT EDIT.
// optiongen: github.com/timestee/optiongen

package xproc

import (
	"io"
	"os"
)

// ProcessOptions should use NewProcessOptions to initialize it
type ProcessOptions struct {
	Args       []string
	Stdin      io.Reader
	Stdout     io.Writer
	Stderr     io.Writer
	WorkingDir string
	Env        []string
}

// NewProcessOptions new ProcessOptions
func NewProcessOptions(opts ...ProcessOption) *ProcessOptions {
	cc := newDefaultProcessOptions()
	for _, opt := range opts {
		opt(cc)
	}
	if watchDogProcessOptions != nil {
		watchDogProcessOptions(cc)
	}
	return cc
}

// ApplyOption apply mutiple new option
func (cc *ProcessOptions) ApplyOption(opts ...ProcessOption) {
	for _, opt := range opts {
		opt(cc)
	}
}

// ProcessOption option func
type ProcessOption func(cc *ProcessOptions)

// WithArgs option func for filed Args
func WithArgs(v ...string) ProcessOption {
	return func(cc *ProcessOptions) {
		cc.Args = v
	}
}

// WithStdin option func for filed Stdin
func WithStdin(v io.Reader) ProcessOption {
	return func(cc *ProcessOptions) {
		cc.Stdin = v
	}
}

// WithStdout option func for filed Stdout
func WithStdout(v io.Writer) ProcessOption {
	return func(cc *ProcessOptions) {
		cc.Stdout = v
	}
}

// WithStderr option func for filed Stderr
func WithStderr(v io.Writer) ProcessOption {
	return func(cc *ProcessOptions) {
		cc.Stderr = v
	}
}

// WithWorkingDir option func for filed WorkingDir
func WithWorkingDir(v string) ProcessOption {
	return func(cc *ProcessOptions) {
		cc.WorkingDir = v
	}
}

// WithEnv option func for filed Env
func WithEnv(v ...string) ProcessOption {
	return func(cc *ProcessOptions) {
		cc.Env = v
	}
}

// InstallProcessOptionsWatchDog the installed func will called when NewProcessOptions  called
func InstallProcessOptionsWatchDog(dog func(cc *ProcessOptions)) { watchDogProcessOptions = dog }

// watchDogProcessOptions global watch dog
var watchDogProcessOptions func(cc *ProcessOptions)

// newDefaultProcessOptions new default ProcessOptions
func newDefaultProcessOptions() *ProcessOptions {
	cc := &ProcessOptions{}

	for _, opt := range [...]ProcessOption{
		WithArgs(make([]string, 0)...),
		WithStdin(os.Stdin),
		WithStdout(os.Stdout),
		WithStderr(os.Stderr),
		WithWorkingDir(""),
		WithEnv(make([]string, 0)...),
	} {
		opt(cc)
	}

	return cc
}

// all getter func
func (cc *ProcessOptions) GetArgs() []string     { return cc.Args }
func (cc *ProcessOptions) GetStdin() io.Reader   { return cc.Stdin }
func (cc *ProcessOptions) GetStdout() io.Writer  { return cc.Stdout }
func (cc *ProcessOptions) GetStderr() io.Writer  { return cc.Stderr }
func (cc *ProcessOptions) GetWorkingDir() string { return cc.WorkingDir }
func (cc *ProcessOptions) GetEnv() []string      { return cc.Env }

// ProcessOptionsVisitor visitor interface for ProcessOptions
type ProcessOptionsVisitor interface {
	GetArgs() []string
	GetStdin() io.Reader
	GetStdout() io.Writer
	GetStderr() io.Writer
	GetWorkingDir() string
	GetEnv() []string
}

// ProcessOptionsInterface visitor + ApplyOption interface for ProcessOptions
type ProcessOptionsInterface interface {
	ProcessOptionsVisitor
	ApplyOption(...ProcessOption)
}
