// Code generated by MockGen. DO NOT EDIT.
// Source: grid.go

// Package geo is a generated GoMock package.
package geo

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockGrid is a mock of Grid interface.
type MockGrid struct {
	ctrl     *gomock.Controller
	recorder *MockGridMockRecorder
}

// MockGridMockRecorder is the mock recorder for MockGrid.
type MockGridMockRecorder struct {
	mock *MockGrid
}

// NewMockGrid creates a new mock instance.
func NewMockGrid(ctrl *gomock.Controller) *MockGrid {
	mock := &MockGrid{ctrl: ctrl}
	mock.recorder = &MockGridMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGrid) EXPECT() *MockGridMockRecorder {
	return m.recorder
}

// MockGridBuilder is a mock of GridBuilder interface.
type MockGridBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockGridBuilderMockRecorder
}

// MockGridBuilderMockRecorder is the mock recorder for MockGridBuilder.
type MockGridBuilderMockRecorder struct {
	mock *MockGridBuilder
}

// NewMockGridBuilder creates a new mock instance.
func NewMockGridBuilder(ctrl *gomock.Controller) *MockGridBuilder {
	mock := &MockGridBuilder{ctrl: ctrl}
	mock.recorder = &MockGridBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGridBuilder) EXPECT() *MockGridBuilderMockRecorder {
	return m.recorder
}

// Build mocks base method.
func (m *MockGridBuilder) Build(x, y int) Grid {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Build", x, y)
	ret0, _ := ret[0].(Grid)
	return ret0
}

// Build indicates an expected call of Build.
func (mr *MockGridBuilderMockRecorder) Build(x, y interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockGridBuilder)(nil).Build), x, y)
}
