// Code generated by MockGen. DO NOT EDIT.
// Source: grid.go
//
// Generated by this command:
//
//	mockgen -source grid.go -package geo -destination grid_mock_test.go
//
// Package geo is a generated GoMock package.
package geo

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCell is a mock of Cell interface.
type MockCell struct {
	ctrl     *gomock.Controller
	recorder *MockCellMockRecorder
}

// MockCellMockRecorder is the mock recorder for MockCell.
type MockCellMockRecorder struct {
	mock *MockCell
}

// NewMockCell creates a new mock instance.
func NewMockCell(ctrl *gomock.Controller) *MockCell {
	mock := &MockCell{ctrl: ctrl}
	mock.recorder = &MockCellMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCell) EXPECT() *MockCellMockRecorder {
	return m.recorder
}

// MockCellBuilder is a mock of CellBuilder interface.
type MockCellBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockCellBuilderMockRecorder
}

// MockCellBuilderMockRecorder is the mock recorder for MockCellBuilder.
type MockCellBuilderMockRecorder struct {
	mock *MockCellBuilder
}

// NewMockCellBuilder creates a new mock instance.
func NewMockCellBuilder(ctrl *gomock.Controller) *MockCellBuilder {
	mock := &MockCellBuilder{ctrl: ctrl}
	mock.recorder = &MockCellBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCellBuilder) EXPECT() *MockCellBuilderMockRecorder {
	return m.recorder
}

// Build mocks base method.
func (m *MockCellBuilder) Build(x, y int) Cell {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Build", x, y)
	ret0, _ := ret[0].(Cell)
	return ret0
}

// Build indicates an expected call of Build.
func (mr *MockCellBuilderMockRecorder) Build(x, y any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockCellBuilder)(nil).Build), x, y)
}
